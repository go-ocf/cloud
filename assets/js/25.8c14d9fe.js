(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{392:function(e,t,s){"use strict";s.r(t);var r=s(25),o=Object(r.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"working-with-grpc-client"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#working-with-grpc-client"}},[e._v("#")]),e._v(" Working with GRPC Client")]),e._v(" "),s("h2",{attrs:{id:"what-it-grpc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#what-it-grpc"}},[e._v("#")]),e._v(" What it GRPC")]),e._v(" "),s("p",[e._v("Please follow "),s("a",{attrs:{href:"https://grpc.io/docs/what-is-grpc/introduction/",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),s("OutboundLink")],1)]),e._v(" "),s("h2",{attrs:{id:"how-to-create-grpc-client-for-grpc-gateway"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#how-to-create-grpc-client-for-grpc-gateway"}},[e._v("#")]),e._v(" How to create GRPC client for grpc-gateway")]),e._v(" "),s("p",[e._v("For creating grpc-client you need to generate a code for your language from proto files, which are stored at "),s("a",{attrs:{href:"https://github.com/plgd-dev/cloud/tree/v2/grpc-gateway/pb",target:"_blank",rel:"noopener noreferrer"}},[e._v("cloud"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("h3",{attrs:{id:"api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[e._v("#")]),e._v(" API")]),e._v(" "),s("p",[e._v("All requests to service must contains valid access token in "),s("a",{attrs:{href:"https://github.com/grpc/grpc-go/blob/master/Documentation/grpc-auth-support.md#oauth2",target:"_blank",rel:"noopener noreferrer"}},[e._v("grpc metadata"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),s("p",[e._v("Each request to the gRPC Gateway shall contain a valid access token as a part of the "),s("a",{attrs:{href:"https://github.com/grpc/grpc-go/blob/master/Documentation/grpc-auth-support.md#oauth2",target:"_blank",rel:"noopener noreferrer"}},[e._v("grpc metadata"),s("OutboundLink")],1),e._v(".")])]),e._v(" "),s("h3",{attrs:{id:"get-devices"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get-devices"}},[e._v("#")]),e._v(" Get Devices")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("GetDevices")]),e._v(" command supports various filter options. If all of them are "),s("strong",[e._v("unset")]),e._v(", all devices of a user identified by the access token are returned.")]),e._v(" "),s("p",[s("strong",[e._v("Example usages of filter options:")])]),e._v(" "),s("ul",[s("li",[e._v("to retrieve certain devices use "),s("code",[e._v("GetDevicesRequest.device_ids_filter")]),e._v(" where ids of these devices needs to be set")]),e._v(" "),s("li",[e._v("to retrieve all offline devices set "),s("code",[e._v("GetDevicesRequest.status_filter")]),e._v(" to "),s("code",[e._v("OFFLINE")])]),e._v(" "),s("li",[e._v("to retrieve all devices of certain types use "),s("code",[e._v("GetDevicesRequest.type_filter")]),e._v(" (e.g. "),s("code",[e._v("x.com.plgd.light")]),e._v(")")])]),e._v(" "),s("p",[e._v("To return only "),s("code",[e._v("ONLINE")]),e._v(" devices with ids "),s("code",[e._v("deviceID1")]),e._v(" and "),s("code",[e._v("deviceID2")]),e._v(", following options shall be set: "),s("code",[e._v('GetDevicesRequest.device_ids_filter("[deviceID1, deviceID2]") && GetDevicesRequest.status_filter([ONLINE])')]),e._v(".")]),e._v(" "),s("h3",{attrs:{id:"get-resource-links"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get-resource-links"}},[e._v("#")]),e._v(" Get Resource Links")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("GetResourceLinks")]),e._v(" command supports various filter options. If all of them are "),s("strong",[e._v("unset")]),e._v(", all links of all devices user is authorized to use are returned.")]),e._v(" "),s("p",[s("strong",[e._v("Example usages of filter options:")])]),e._v(" "),s("ul",[s("li",[e._v("to retrieve links of certain devices use "),s("code",[e._v("GetResourceLinksRequest.device_ids_filter")]),e._v(" where ids of these devices needs to be set")]),e._v(" "),s("li",[e._v("to retrieve links of certain types use "),s("code",[e._v("GetResourceLinksRequest.type_filter")]),e._v(" (e.g. "),s("code",[e._v("oic.r.switch.binary")]),e._v(")")])]),e._v(" "),s("p",[e._v("To return only binary switches resources hosted by devices with ids "),s("code",[e._v("deviceID1")]),e._v(" and "),s("code",[e._v("deviceID2")]),e._v(", following options shall be set: "),s("code",[e._v('GetResourceLinksRequest.device_ids_filter("[deviceID1, deviceID2]") && GetResourceLinksRequest.type_filter([oic.r.switch.binary])')]),e._v(".")]),e._v(" "),s("h3",{attrs:{id:"retrieve-resource-content"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#retrieve-resource-content"}},[e._v("#")]),e._v(" Retrieve Resource Content")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("RetrieveResourcesValues")]),e._v(" command supports various filter options. If all of them are "),s("strong",[e._v("unset")]),e._v(", all resource contents of all devices user is authorized to use are returned.")]),e._v(" "),s("p",[s("strong",[e._v("Example usages of filter options:")])]),e._v(" "),s("ul",[s("li",[e._v("to retrieve of resources identified by their hrefs use "),s("code",[e._v("RetrieveResourcesValuesRequest.resource_ids_filter")]),e._v(" where combinations "),s("code",[e._v("deviceID")]),e._v(" and "),s("code",[e._v("href")]),e._v(" is required")]),e._v(" "),s("li",[e._v("to retrieve resource values of certain devices use "),s("code",[e._v("RetrieveResourcesValuesRequest.device_ids_filter")]),e._v(" where ids of these devices needs to be set")]),e._v(" "),s("li",[e._v("to retrieve values from resources of a specific type use "),s("code",[e._v("RetrieveResourcesValuesRequest.type_filter")])])]),e._v(" "),s("p",[e._v("To return values of binary switch resources hosted by devices with ids "),s("code",[e._v("deviceID1")]),e._v(" and "),s("code",[e._v("deviceID2")]),e._v(", following options shall be set: "),s("code",[e._v('RetrieveResourcesValuesRequest.device_ids_filter("[deviceID1, deviceID2]") && RetrieveResourcesValuesRequest.type_filter([oic.r.switch.binary])')]),e._v(".")]),e._v(" "),s("h3",{attrs:{id:"subscribe-to-events"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#subscribe-to-events"}},[e._v("#")]),e._v(" Subscribe to Events")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("SubscribeToEvents")]),e._v(" command opens the stream which content is controlled by sending messages with filter options.")]),e._v(" "),s("p",[s("strong",[e._v("To control what will be pushed to the stream, send a "),s("code",[e._v("SubscribeToEvents")]),e._v(" message with option:")])]),e._v(" "),s("ul",[s("li",[s("code",[e._v("filter_by.devices_event.filter_events")]),e._v(" set to e.g. "),s("code",[e._v("ONLINE")]),e._v(" to receive "),s("strong",[e._v("devices events")]),e._v(" which changed their status to "),s("code",[e._v("ONLINE")])]),e._v(" "),s("li",[s("code",[e._v("filter_by.device_event.{device_id, filter_events}")]),e._v(" set to e.g. "),s("code",[e._v("RESOURCE_PUBLISHED")]),e._v(" to receive "),s("strong",[e._v("device events")])]),e._v(" "),s("li",[s("code",[e._v("filter_by.device_event.{resource_id.{device_id, href}, filter_events}")]),e._v(" set to e.g. "),s("code",[e._v("CONTENT_CHANGED")]),e._v(" to receive "),s("strong",[e._v("resource events")])])]),e._v(" "),s("p",[e._v("First event returned after the successful subscription is of type "),s("code",[e._v("OperationProcessed")]),e._v(". Property "),s("code",[e._v("OperationProcessed.error_status.code")]),e._v(" contains information if the subscription was successful. If it was successful, property "),s("code",[e._v("subscriptionId")]),e._v(" is set. All events belonging to single "),s("code",[e._v("SubscribeToEvents")]),e._v(" request are then identified by this "),s("code",[e._v("subscriptionId")]),e._v(".")]),e._v(" "),s("p",[e._v("If user losts a device "),s("em",[e._v("(unregistered / no more shared with the user)")]),e._v(", the client receives an event "),s("code",[e._v("SubscriptionCanceled")]),e._v(" with corresponding "),s("code",[e._v("subscriptionId")]),e._v(".")]),e._v(" "),s("h3",{attrs:{id:"retrieve-resource-from-device"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#retrieve-resource-from-device"}},[e._v("#")]),e._v(" Retrieve Resource from Device")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("RetrieveResourceFromDevice")]),e._v(" retrieves resource content directly from the device - resource shadow value is not returned.")]),e._v(" "),s("blockquote",[s("p",[e._v('This command execution is "expensive" as it has to reach the real device while your client synchronously waits for a response.')])]),e._v(" "),s("h3",{attrs:{id:"update-resource-content"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#update-resource-content"}},[e._v("#")]),e._v(" Update Resource Content")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("UpdateResource")]),e._v(" command requests resource update on the device.")]),e._v(" "),s("h3",{attrs:{id:"create-resource"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#create-resource"}},[e._v("#")]),e._v(" Create Resource")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("Create Resource")]),e._v(" command requests creation of a new resource on a specific collection on the device.")]),e._v(" "),s("h3",{attrs:{id:"delete-resource"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#delete-resource"}},[e._v("#")]),e._v(" Delete Resource")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("DeleteResource")]),e._v(" command requests device to delete a specific resource. Confirmation message doesn't mean that the resource was deleted. After successful deletion, devices unpublishes it's resource. This information is propagated to client in form of an "),s("code",[e._v("RESOURCE_UNPUBLISHED")]),e._v(" event.")]),e._v(" "),s("h3",{attrs:{id:"retrieve-pending-commands"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#retrieve-pending-commands"}},[e._v("#")]),e._v(" Retrieve pending commands")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("RetrievePendingCommands")]),e._v(" command supports various filter options. If all of them are "),s("strong",[e._v("unset")]),e._v(", all pending commands of all devices user is authorized to use are returned.")]),e._v(" "),s("p",[s("strong",[e._v("Example usages of filter options:")])]),e._v(" "),s("ul",[s("li",[e._v("to retrieve pending commands of resources identified by their hrefs use "),s("code",[e._v("RetrievePendingCommandsRequest.resource_ids_filter")]),e._v(" where combinations "),s("code",[e._v("deviceID")]),e._v(" and "),s("code",[e._v("href")]),e._v(" is required")]),e._v(" "),s("li",[e._v("to retrieve pending commands of certain devices use "),s("code",[e._v("RetrievePendingCommandsRequest.device_ids_filter")]),e._v(" where ids of these devices needs to be set")]),e._v(" "),s("li",[e._v("to retrieve pending commands of a specific type resources use "),s("code",[e._v("RetrievePendingCommandsRequest.type_filter")])]),e._v(" "),s("li",[e._v("to retrieve pending commands of certain commands use "),s("code",[e._v("RetrievePendingCommandsRequest.commands_filter")])])]),e._v(" "),s("p",[e._v("To return certain pending commands of binary switch resources hosted by devices with ids "),s("code",[e._v("deviceID1")]),e._v(" and "),s("code",[e._v("deviceID2")]),e._v(", following options shall be set: "),s("code",[e._v('RetrievePendingCommandsRequest.device_ids_filter("[deviceID1, deviceID2]") && RetrievePendingCommandsRequest.type_filter([oic.r.switch.binary])')]),e._v(".")]),e._v(" "),s("h4",{attrs:{id:"contract"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#contract"}},[e._v("#")]),e._v(" Contract")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/plgd-dev/cloud/blob/v2/grpc-gateway/pb/service.proto",target:"_blank",rel:"noopener noreferrer"}},[e._v("service"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/plgd-dev/cloud/blob/v2/grpc-gateway/pb/devices.proto",target:"_blank",rel:"noopener noreferrer"}},[e._v("requests/responses"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/plgd-dev/cloud/blob/v2/grpc-gateway/pb/clientConfiguration.proto",target:"_blank",rel:"noopener noreferrer"}},[e._v("client configuration"),s("OutboundLink")],1)])]),e._v(" "),s("h3",{attrs:{id:"go-lang-grpc-client"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#go-lang-grpc-client"}},[e._v("#")]),e._v(" Go-Lang GRPC client")]),e._v(" "),s("h3",{attrs:{id:"creating-client"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#creating-client"}},[e._v("#")]),e._v(" Creating client")]),e._v(" "),s("p",[e._v("Grpc-gateway uses TLS listener, so client must have properly configured TLS.  Here is simple example how to create a grpc client.")]),e._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"google.golang.org/grpc"')]),e._v("\n\t"),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"google.golang.org/grpc/credentials"')]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"github.com/plgd-dev/cloud/grpc-gateway/pb"')]),e._v("\n\t"),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"github.com/plgd-dev/cloud/grpc-gateway/client"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("...")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Create TLS connection to the grpc-gateway.")]),e._v("\n    gwConn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" err "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":=")]),e._v(" grpc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("Dial")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n        address"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        grpc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("WithTransportCredentials")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("credentials"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("NewTLS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("tlsConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" err "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("nil")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("panic")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"cannot connect to grpc-gateway: "')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("Error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Create basic client which was generated from proto files.")]),e._v("\n    basicClient "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":=")]),e._v(" pb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("NewGrpcGatewayClient")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("gwConn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Create Extended client which provide us more friendly functions.")]),e._v("\n    extendedClient "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":=")]),e._v(" client"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("NewClient")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("basicClient"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("...")]),e._v("\n")])])]),s("h3",{attrs:{id:"using-extended-grpc-client"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-extended-grpc-client"}},[e._v("#")]),e._v(" Using extended grpc client")]),e._v(" "),s("p",[e._v("More info in "),s("a",{attrs:{href:"https://pkg.go.dev/github.com/plgd-dev/cloud/grpc-gateway/client",target:"_blank",rel:"noopener noreferrer"}},[e._v("doc"),s("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=o.exports}}]);