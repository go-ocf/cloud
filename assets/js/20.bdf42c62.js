(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{387:function(t,e,r){"use strict";r.r(e);var o=r(25),i=Object(o.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"oauth-server"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#oauth-server"}},[t._v("#")]),t._v(" OAuth Server")]),t._v(" "),r("p",[t._v("Mocked OAuth2.0 Server used for automated tests and "),r("a",{attrs:{href:"..."}},[t._v("bundle container")])]),t._v(" "),r("h2",{attrs:{id:"yaml-configuration"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#yaml-configuration"}},[t._v("#")]),t._v(" YAML Configuration")]),t._v(" "),r("h3",{attrs:{id:"logging"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#logging"}},[t._v("#")]),t._v(" Logging")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("Property")]),t._v(" "),r("th",[t._v("Type")]),t._v(" "),r("th",[t._v("Description")]),t._v(" "),r("th",[t._v("Default")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[r("code",[t._v("log.debug")])]),t._v(" "),r("td",[t._v("bool")]),t._v(" "),r("td",[r("code",[t._v("Set to true if you would like to see extra information on logs.")])]),t._v(" "),r("td",[r("code",[t._v("false")])])])])]),t._v(" "),r("h3",{attrs:{id:"http-api"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http-api"}},[t._v("#")]),t._v(" HTTP API")]),t._v(" "),r("p",[t._v("HTTP API of the OAuth Server service as defined "),r("a",{attrs:{href:"https://github.com/plgd-dev/cloud/blob/v2/test/oauth-server/uri/uri.go",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),r("OutboundLink")],1)]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("Property")]),t._v(" "),r("th",[t._v("Type")]),t._v(" "),r("th",[t._v("Description")]),t._v(" "),r("th",[t._v("Default")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[r("code",[t._v("api.http.address")])]),t._v(" "),r("td",[t._v("string")]),t._v(" "),r("td",[r("code",[t._v("Listen specification <host>:<port> for http client connection.")])]),t._v(" "),r("td",[r("code",[t._v('"0.0.0.0:9100"')])])]),t._v(" "),r("tr",[r("td",[r("code",[t._v("api.http.tls.caPool")])]),t._v(" "),r("td",[t._v("string")]),t._v(" "),r("td",[r("code",[t._v("File path to the root certificate in PEM format which might contain multiple certificates in a single file.")])]),t._v(" "),r("td",[r("code",[t._v('""')])])]),t._v(" "),r("tr",[r("td",[r("code",[t._v("api.http.tls.keyFile")])]),t._v(" "),r("td",[t._v("string")]),t._v(" "),r("td",[r("code",[t._v("File path to private key in PEM format.")])]),t._v(" "),r("td",[r("code",[t._v('""')])])]),t._v(" "),r("tr",[r("td",[r("code",[t._v("api.http.tls.certFile")])]),t._v(" "),r("td",[t._v("string")]),t._v(" "),r("td",[r("code",[t._v("File path to certificate in PEM format.")])]),t._v(" "),r("td",[r("code",[t._v('""')])])]),t._v(" "),r("tr",[r("td",[r("code",[t._v("api.http.tls.clientCertificateRequired")])]),t._v(" "),r("td",[t._v("bool")]),t._v(" "),r("td",[r("code",[t._v("If true, require client certificate.")])]),t._v(" "),r("td",[r("code",[t._v("true")])])])])]),t._v(" "),r("h3",{attrs:{id:"oauth-signer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#oauth-signer"}},[t._v("#")]),t._v(" OAuth Signer")]),t._v(" "),r("p",[t._v("Signer configuration to issue ID/access tokens of OAuth provider for mock testing.")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("Property")]),t._v(" "),r("th",[t._v("Type")]),t._v(" "),r("th",[t._v("Description")]),t._v(" "),r("th",[t._v("Default")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[r("code",[t._v("oauthSigner.idTokenKeyFile")])]),t._v(" "),r("td",[t._v("string")]),t._v(" "),r("td",[r("code",[t._v("File path to a private RSA key in PEM format required for ID token signing.")])]),t._v(" "),r("td",[r("code",[t._v('""')])])]),t._v(" "),r("tr",[r("td",[r("code",[t._v("oauthSigner.accessTokenKeyFile")])]),t._v(" "),r("td",[t._v("string")]),t._v(" "),r("td",[r("code",[t._v("File path to a private ECDSA key in PEM format required for access token signing.")])]),t._v(" "),r("td",[r("code",[t._v('""')])])]),t._v(" "),r("tr",[r("td",[r("code",[t._v("oauthSigner.domain")])]),t._v(" "),r("td",[t._v("string")]),t._v(" "),r("td",[r("code",[t._v("Domain address <host>:<port> for OAuth APIs.")])]),t._v(" "),r("td",[r("code",[t._v('""')])])])])]),t._v(" "),r("blockquote",[r("p",[t._v('Note that the string type related to time (i.e. timeout, idleConnTimeout, expirationTime) is decimal numbers, each with optional fraction and a unit suffix, such as "300ms", "1.5h" or "2h45m". Valid time units are "ns", "us", "ms", "s", "m", "h".')])])])}),[],!1,null,null,null);e.default=i.exports}}]);