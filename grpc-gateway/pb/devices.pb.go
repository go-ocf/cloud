// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/plgd-dev/cloud/grpc-gateway/pb/devices.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Status_UNKNOWN         Status = 0
	Status_OK              Status = 1
	Status_BAD_REQUEST     Status = 2
	Status_UNAUTHORIZED    Status = 3
	Status_FORBIDDEN       Status = 4
	Status_NOT_FOUND       Status = 5
	Status_UNAVAILABLE     Status = 6
	Status_NOT_IMPLEMENTED Status = 7
	Status_ACCEPTED        Status = 8
	Status_ERROR           Status = 9
)

var Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "OK",
	2: "BAD_REQUEST",
	3: "UNAUTHORIZED",
	4: "FORBIDDEN",
	5: "NOT_FOUND",
	6: "UNAVAILABLE",
	7: "NOT_IMPLEMENTED",
	8: "ACCEPTED",
	9: "ERROR",
}

var Status_value = map[string]int32{
	"UNKNOWN":         0,
	"OK":              1,
	"BAD_REQUEST":     2,
	"UNAUTHORIZED":    3,
	"FORBIDDEN":       4,
	"NOT_FOUND":       5,
	"UNAVAILABLE":     6,
	"NOT_IMPLEMENTED": 7,
	"ACCEPTED":        8,
	"ERROR":           9,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{0}
}

type GetDevicesRequest_Status int32

const (
	GetDevicesRequest_ONLINE  GetDevicesRequest_Status = 0
	GetDevicesRequest_OFFLINE GetDevicesRequest_Status = 1
)

var GetDevicesRequest_Status_name = map[int32]string{
	0: "ONLINE",
	1: "OFFLINE",
}

var GetDevicesRequest_Status_value = map[string]int32{
	"ONLINE":  0,
	"OFFLINE": 1,
}

func (x GetDevicesRequest_Status) String() string {
	return proto.EnumName(GetDevicesRequest_Status_name, int32(x))
}

func (GetDevicesRequest_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{0, 0}
}

type SubscribeForEvents_DevicesEventFilter_Event int32

const (
	SubscribeForEvents_DevicesEventFilter_REGISTERED   SubscribeForEvents_DevicesEventFilter_Event = 0
	SubscribeForEvents_DevicesEventFilter_UNREGISTERED SubscribeForEvents_DevicesEventFilter_Event = 1
	SubscribeForEvents_DevicesEventFilter_ONLINE       SubscribeForEvents_DevicesEventFilter_Event = 2
	SubscribeForEvents_DevicesEventFilter_OFFLINE      SubscribeForEvents_DevicesEventFilter_Event = 3
)

var SubscribeForEvents_DevicesEventFilter_Event_name = map[int32]string{
	0: "REGISTERED",
	1: "UNREGISTERED",
	2: "ONLINE",
	3: "OFFLINE",
}

var SubscribeForEvents_DevicesEventFilter_Event_value = map[string]int32{
	"REGISTERED":   0,
	"UNREGISTERED": 1,
	"ONLINE":       2,
	"OFFLINE":      3,
}

func (x SubscribeForEvents_DevicesEventFilter_Event) String() string {
	return proto.EnumName(SubscribeForEvents_DevicesEventFilter_Event_name, int32(x))
}

func (SubscribeForEvents_DevicesEventFilter_Event) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{9, 0, 0}
}

type SubscribeForEvents_DeviceEventFilter_Event int32

const (
	SubscribeForEvents_DeviceEventFilter_RESOURCE_PUBLISHED        SubscribeForEvents_DeviceEventFilter_Event = 0
	SubscribeForEvents_DeviceEventFilter_RESOURCE_UNPUBLISHED      SubscribeForEvents_DeviceEventFilter_Event = 1
	SubscribeForEvents_DeviceEventFilter_RESOURCE_UPDATE_PENDING   SubscribeForEvents_DeviceEventFilter_Event = 2
	SubscribeForEvents_DeviceEventFilter_RESOURCE_UPDATED          SubscribeForEvents_DeviceEventFilter_Event = 3
	SubscribeForEvents_DeviceEventFilter_RESOURCE_RETRIEVE_PENDING SubscribeForEvents_DeviceEventFilter_Event = 4
	SubscribeForEvents_DeviceEventFilter_RESOURCE_RETRIEVED        SubscribeForEvents_DeviceEventFilter_Event = 5
)

var SubscribeForEvents_DeviceEventFilter_Event_name = map[int32]string{
	0: "RESOURCE_PUBLISHED",
	1: "RESOURCE_UNPUBLISHED",
	2: "RESOURCE_UPDATE_PENDING",
	3: "RESOURCE_UPDATED",
	4: "RESOURCE_RETRIEVE_PENDING",
	5: "RESOURCE_RETRIEVED",
}

var SubscribeForEvents_DeviceEventFilter_Event_value = map[string]int32{
	"RESOURCE_PUBLISHED":        0,
	"RESOURCE_UNPUBLISHED":      1,
	"RESOURCE_UPDATE_PENDING":   2,
	"RESOURCE_UPDATED":          3,
	"RESOURCE_RETRIEVE_PENDING": 4,
	"RESOURCE_RETRIEVED":        5,
}

func (x SubscribeForEvents_DeviceEventFilter_Event) String() string {
	return proto.EnumName(SubscribeForEvents_DeviceEventFilter_Event_name, int32(x))
}

func (SubscribeForEvents_DeviceEventFilter_Event) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{9, 1, 0}
}

type SubscribeForEvents_ResourceEventFilter_Event int32

const (
	SubscribeForEvents_ResourceEventFilter_CONTENT_CHANGED SubscribeForEvents_ResourceEventFilter_Event = 0
)

var SubscribeForEvents_ResourceEventFilter_Event_name = map[int32]string{
	0: "CONTENT_CHANGED",
}

var SubscribeForEvents_ResourceEventFilter_Event_value = map[string]int32{
	"CONTENT_CHANGED": 0,
}

func (x SubscribeForEvents_ResourceEventFilter_Event) String() string {
	return proto.EnumName(SubscribeForEvents_ResourceEventFilter_Event_name, int32(x))
}

func (SubscribeForEvents_ResourceEventFilter_Event) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{9, 2, 0}
}

type Event_OperationProcessed_ErrorStatus_Code int32

const (
	Event_OperationProcessed_ErrorStatus_OK        Event_OperationProcessed_ErrorStatus_Code = 0
	Event_OperationProcessed_ErrorStatus_ERROR     Event_OperationProcessed_ErrorStatus_Code = 1
	Event_OperationProcessed_ErrorStatus_NOT_FOUND Event_OperationProcessed_ErrorStatus_Code = 2
)

var Event_OperationProcessed_ErrorStatus_Code_name = map[int32]string{
	0: "OK",
	1: "ERROR",
	2: "NOT_FOUND",
}

var Event_OperationProcessed_ErrorStatus_Code_value = map[string]int32{
	"OK":        0,
	"ERROR":     1,
	"NOT_FOUND": 2,
}

func (x Event_OperationProcessed_ErrorStatus_Code) String() string {
	return proto.EnumName(Event_OperationProcessed_ErrorStatus_Code_name, int32(x))
}

func (Event_OperationProcessed_ErrorStatus_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{10, 11, 0, 0}
}

type GetDevicesRequest struct {
	TypeFilter      []string                   `protobuf:"bytes,1,rep,name=type_filter,json=typeFilter,proto3" json:"type_filter,omitempty"`
	StatusFilter    []GetDevicesRequest_Status `protobuf:"varint,2,rep,packed,name=status_filter,json=statusFilter,proto3,enum=ocf.cloud.grpcgateway.pb.GetDevicesRequest_Status" json:"status_filter,omitempty"`
	DeviceIdsFilter []string                   `protobuf:"bytes,3,rep,name=device_ids_filter,json=deviceIdsFilter,proto3" json:"device_ids_filter,omitempty"`
}

func (m *GetDevicesRequest) Reset()         { *m = GetDevicesRequest{} }
func (m *GetDevicesRequest) String() string { return proto.CompactTextString(m) }
func (*GetDevicesRequest) ProtoMessage()    {}
func (*GetDevicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{0}
}
func (m *GetDevicesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDevicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDevicesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDevicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDevicesRequest.Merge(m, src)
}
func (m *GetDevicesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDevicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDevicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDevicesRequest proto.InternalMessageInfo

func (m *GetDevicesRequest) GetTypeFilter() []string {
	if m != nil {
		return m.TypeFilter
	}
	return nil
}

func (m *GetDevicesRequest) GetStatusFilter() []GetDevicesRequest_Status {
	if m != nil {
		return m.StatusFilter
	}
	return nil
}

func (m *GetDevicesRequest) GetDeviceIdsFilter() []string {
	if m != nil {
		return m.DeviceIdsFilter
	}
	return nil
}

type GetResourceLinksRequest struct {
	TypeFilter      []string `protobuf:"bytes,1,rep,name=type_filter,json=typeFilter,proto3" json:"type_filter,omitempty"`
	DeviceIdsFilter []string `protobuf:"bytes,2,rep,name=device_ids_filter,json=deviceIdsFilter,proto3" json:"device_ids_filter,omitempty"`
}

func (m *GetResourceLinksRequest) Reset()         { *m = GetResourceLinksRequest{} }
func (m *GetResourceLinksRequest) String() string { return proto.CompactTextString(m) }
func (*GetResourceLinksRequest) ProtoMessage()    {}
func (*GetResourceLinksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{1}
}
func (m *GetResourceLinksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetResourceLinksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetResourceLinksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetResourceLinksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResourceLinksRequest.Merge(m, src)
}
func (m *GetResourceLinksRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetResourceLinksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResourceLinksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetResourceLinksRequest proto.InternalMessageInfo

func (m *GetResourceLinksRequest) GetTypeFilter() []string {
	if m != nil {
		return m.TypeFilter
	}
	return nil
}

func (m *GetResourceLinksRequest) GetDeviceIdsFilter() []string {
	if m != nil {
		return m.DeviceIdsFilter
	}
	return nil
}

type ResourceId struct {
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Href     string `protobuf:"bytes,2,opt,name=href,proto3" json:"href,omitempty"`
}

func (m *ResourceId) Reset()         { *m = ResourceId{} }
func (m *ResourceId) String() string { return proto.CompactTextString(m) }
func (*ResourceId) ProtoMessage()    {}
func (*ResourceId) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{2}
}
func (m *ResourceId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceId.Merge(m, src)
}
func (m *ResourceId) XXX_Size() int {
	return m.Size()
}
func (m *ResourceId) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceId.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceId proto.InternalMessageInfo

func (m *ResourceId) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *ResourceId) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

// RetrieveResourceFromDeviceRequest retrieve value from device
type RetrieveResourceFromDeviceRequest struct {
	ResourceId        *ResourceId `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ResourceInterface string      `protobuf:"bytes,2,opt,name=resource_interface,json=resourceInterface,proto3" json:"resource_interface,omitempty"`
}

func (m *RetrieveResourceFromDeviceRequest) Reset()         { *m = RetrieveResourceFromDeviceRequest{} }
func (m *RetrieveResourceFromDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*RetrieveResourceFromDeviceRequest) ProtoMessage()    {}
func (*RetrieveResourceFromDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{3}
}
func (m *RetrieveResourceFromDeviceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveResourceFromDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveResourceFromDeviceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveResourceFromDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveResourceFromDeviceRequest.Merge(m, src)
}
func (m *RetrieveResourceFromDeviceRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveResourceFromDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveResourceFromDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveResourceFromDeviceRequest proto.InternalMessageInfo

func (m *RetrieveResourceFromDeviceRequest) GetResourceId() *ResourceId {
	if m != nil {
		return m.ResourceId
	}
	return nil
}

func (m *RetrieveResourceFromDeviceRequest) GetResourceInterface() string {
	if m != nil {
		return m.ResourceInterface
	}
	return ""
}

type RetrieveResourceFromDeviceResponse struct {
	Content *Content `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *RetrieveResourceFromDeviceResponse) Reset()         { *m = RetrieveResourceFromDeviceResponse{} }
func (m *RetrieveResourceFromDeviceResponse) String() string { return proto.CompactTextString(m) }
func (*RetrieveResourceFromDeviceResponse) ProtoMessage()    {}
func (*RetrieveResourceFromDeviceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{4}
}
func (m *RetrieveResourceFromDeviceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveResourceFromDeviceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveResourceFromDeviceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveResourceFromDeviceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveResourceFromDeviceResponse.Merge(m, src)
}
func (m *RetrieveResourceFromDeviceResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveResourceFromDeviceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveResourceFromDeviceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveResourceFromDeviceResponse proto.InternalMessageInfo

func (m *RetrieveResourceFromDeviceResponse) GetContent() *Content {
	if m != nil {
		return m.Content
	}
	return nil
}

// RetrieveResourcesValuesRequest get values from resource-shadow
type RetrieveResourcesValuesRequest struct {
	ResourceIdsFilter []*ResourceId `protobuf:"bytes,1,rep,name=resource_ids_filter,json=resourceIdsFilter,proto3" json:"resource_ids_filter,omitempty"`
	DeviceIdsFilter   []string      `protobuf:"bytes,2,rep,name=device_ids_filter,json=deviceIdsFilter,proto3" json:"device_ids_filter,omitempty"`
	TypeFilter        []string      `protobuf:"bytes,3,rep,name=type_filter,json=typeFilter,proto3" json:"type_filter,omitempty"`
}

func (m *RetrieveResourcesValuesRequest) Reset()         { *m = RetrieveResourcesValuesRequest{} }
func (m *RetrieveResourcesValuesRequest) String() string { return proto.CompactTextString(m) }
func (*RetrieveResourcesValuesRequest) ProtoMessage()    {}
func (*RetrieveResourcesValuesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{5}
}
func (m *RetrieveResourcesValuesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveResourcesValuesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveResourcesValuesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveResourcesValuesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveResourcesValuesRequest.Merge(m, src)
}
func (m *RetrieveResourcesValuesRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveResourcesValuesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveResourcesValuesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveResourcesValuesRequest proto.InternalMessageInfo

func (m *RetrieveResourcesValuesRequest) GetResourceIdsFilter() []*ResourceId {
	if m != nil {
		return m.ResourceIdsFilter
	}
	return nil
}

func (m *RetrieveResourcesValuesRequest) GetDeviceIdsFilter() []string {
	if m != nil {
		return m.DeviceIdsFilter
	}
	return nil
}

func (m *RetrieveResourcesValuesRequest) GetTypeFilter() []string {
	if m != nil {
		return m.TypeFilter
	}
	return nil
}

type ResourceValue struct {
	ResourceId *ResourceId `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	Types      []string    `protobuf:"bytes,2,rep,name=types,proto3" json:"types,omitempty"`
	Content    *Content    `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Status     Status      `protobuf:"varint,4,opt,name=status,proto3,enum=ocf.cloud.grpcgateway.pb.Status" json:"status,omitempty"`
}

func (m *ResourceValue) Reset()         { *m = ResourceValue{} }
func (m *ResourceValue) String() string { return proto.CompactTextString(m) }
func (*ResourceValue) ProtoMessage()    {}
func (*ResourceValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{6}
}
func (m *ResourceValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceValue.Merge(m, src)
}
func (m *ResourceValue) XXX_Size() int {
	return m.Size()
}
func (m *ResourceValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceValue.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceValue proto.InternalMessageInfo

func (m *ResourceValue) GetResourceId() *ResourceId {
	if m != nil {
		return m.ResourceId
	}
	return nil
}

func (m *ResourceValue) GetTypes() []string {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *ResourceValue) GetContent() *Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *ResourceValue) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_UNKNOWN
}

type UpdateResourceValuesRequest struct {
	ResourceId        *ResourceId `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	Content           *Content    `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	ResourceInterface string      `protobuf:"bytes,3,opt,name=resource_interface,json=resourceInterface,proto3" json:"resource_interface,omitempty"`
}

func (m *UpdateResourceValuesRequest) Reset()         { *m = UpdateResourceValuesRequest{} }
func (m *UpdateResourceValuesRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateResourceValuesRequest) ProtoMessage()    {}
func (*UpdateResourceValuesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{7}
}
func (m *UpdateResourceValuesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateResourceValuesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateResourceValuesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateResourceValuesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateResourceValuesRequest.Merge(m, src)
}
func (m *UpdateResourceValuesRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateResourceValuesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateResourceValuesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateResourceValuesRequest proto.InternalMessageInfo

func (m *UpdateResourceValuesRequest) GetResourceId() *ResourceId {
	if m != nil {
		return m.ResourceId
	}
	return nil
}

func (m *UpdateResourceValuesRequest) GetContent() *Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *UpdateResourceValuesRequest) GetResourceInterface() string {
	if m != nil {
		return m.ResourceInterface
	}
	return ""
}

type UpdateResourceValuesResponse struct {
	Content *Content `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Status  Status   `protobuf:"varint,2,opt,name=status,proto3,enum=ocf.cloud.grpcgateway.pb.Status" json:"status,omitempty"`
}

func (m *UpdateResourceValuesResponse) Reset()         { *m = UpdateResourceValuesResponse{} }
func (m *UpdateResourceValuesResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateResourceValuesResponse) ProtoMessage()    {}
func (*UpdateResourceValuesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{8}
}
func (m *UpdateResourceValuesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateResourceValuesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateResourceValuesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateResourceValuesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateResourceValuesResponse.Merge(m, src)
}
func (m *UpdateResourceValuesResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateResourceValuesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateResourceValuesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateResourceValuesResponse proto.InternalMessageInfo

func (m *UpdateResourceValuesResponse) GetContent() *Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *UpdateResourceValuesResponse) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_UNKNOWN
}

type SubscribeForEvents struct {
	// Types that are valid to be assigned to FilterBy:
	//	*SubscribeForEvents_DevicesEvent
	//	*SubscribeForEvents_DeviceEvent
	//	*SubscribeForEvents_ResourceEvent
	//	*SubscribeForEvents_CancelSubscription_
	FilterBy isSubscribeForEvents_FilterBy `protobuf_oneof:"filter_by"`
	Token    string                        `protobuf:"bytes,101,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *SubscribeForEvents) Reset()         { *m = SubscribeForEvents{} }
func (m *SubscribeForEvents) String() string { return proto.CompactTextString(m) }
func (*SubscribeForEvents) ProtoMessage()    {}
func (*SubscribeForEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{9}
}
func (m *SubscribeForEvents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeForEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeForEvents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeForEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeForEvents.Merge(m, src)
}
func (m *SubscribeForEvents) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeForEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeForEvents.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeForEvents proto.InternalMessageInfo

type isSubscribeForEvents_FilterBy interface {
	isSubscribeForEvents_FilterBy()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SubscribeForEvents_DevicesEvent struct {
	DevicesEvent *SubscribeForEvents_DevicesEventFilter `protobuf:"bytes,1,opt,name=devices_event,json=devicesEvent,proto3,oneof" json:"devices_event,omitempty"`
}
type SubscribeForEvents_DeviceEvent struct {
	DeviceEvent *SubscribeForEvents_DeviceEventFilter `protobuf:"bytes,2,opt,name=device_event,json=deviceEvent,proto3,oneof" json:"device_event,omitempty"`
}
type SubscribeForEvents_ResourceEvent struct {
	ResourceEvent *SubscribeForEvents_ResourceEventFilter `protobuf:"bytes,3,opt,name=resource_event,json=resourceEvent,proto3,oneof" json:"resource_event,omitempty"`
}
type SubscribeForEvents_CancelSubscription_ struct {
	CancelSubscription *SubscribeForEvents_CancelSubscription `protobuf:"bytes,5,opt,name=cancel_subscription,json=cancelSubscription,proto3,oneof" json:"cancel_subscription,omitempty"`
}

func (*SubscribeForEvents_DevicesEvent) isSubscribeForEvents_FilterBy()        {}
func (*SubscribeForEvents_DeviceEvent) isSubscribeForEvents_FilterBy()         {}
func (*SubscribeForEvents_ResourceEvent) isSubscribeForEvents_FilterBy()       {}
func (*SubscribeForEvents_CancelSubscription_) isSubscribeForEvents_FilterBy() {}

func (m *SubscribeForEvents) GetFilterBy() isSubscribeForEvents_FilterBy {
	if m != nil {
		return m.FilterBy
	}
	return nil
}

func (m *SubscribeForEvents) GetDevicesEvent() *SubscribeForEvents_DevicesEventFilter {
	if x, ok := m.GetFilterBy().(*SubscribeForEvents_DevicesEvent); ok {
		return x.DevicesEvent
	}
	return nil
}

func (m *SubscribeForEvents) GetDeviceEvent() *SubscribeForEvents_DeviceEventFilter {
	if x, ok := m.GetFilterBy().(*SubscribeForEvents_DeviceEvent); ok {
		return x.DeviceEvent
	}
	return nil
}

func (m *SubscribeForEvents) GetResourceEvent() *SubscribeForEvents_ResourceEventFilter {
	if x, ok := m.GetFilterBy().(*SubscribeForEvents_ResourceEvent); ok {
		return x.ResourceEvent
	}
	return nil
}

func (m *SubscribeForEvents) GetCancelSubscription() *SubscribeForEvents_CancelSubscription {
	if x, ok := m.GetFilterBy().(*SubscribeForEvents_CancelSubscription_); ok {
		return x.CancelSubscription
	}
	return nil
}

func (m *SubscribeForEvents) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SubscribeForEvents) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SubscribeForEvents_DevicesEvent)(nil),
		(*SubscribeForEvents_DeviceEvent)(nil),
		(*SubscribeForEvents_ResourceEvent)(nil),
		(*SubscribeForEvents_CancelSubscription_)(nil),
	}
}

type SubscribeForEvents_DevicesEventFilter struct {
	FilterEvents []SubscribeForEvents_DevicesEventFilter_Event `protobuf:"varint,1,rep,packed,name=filter_events,json=filterEvents,proto3,enum=ocf.cloud.grpcgateway.pb.SubscribeForEvents_DevicesEventFilter_Event" json:"filter_events,omitempty"`
}

func (m *SubscribeForEvents_DevicesEventFilter) Reset()         { *m = SubscribeForEvents_DevicesEventFilter{} }
func (m *SubscribeForEvents_DevicesEventFilter) String() string { return proto.CompactTextString(m) }
func (*SubscribeForEvents_DevicesEventFilter) ProtoMessage()    {}
func (*SubscribeForEvents_DevicesEventFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{9, 0}
}
func (m *SubscribeForEvents_DevicesEventFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeForEvents_DevicesEventFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeForEvents_DevicesEventFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeForEvents_DevicesEventFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeForEvents_DevicesEventFilter.Merge(m, src)
}
func (m *SubscribeForEvents_DevicesEventFilter) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeForEvents_DevicesEventFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeForEvents_DevicesEventFilter.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeForEvents_DevicesEventFilter proto.InternalMessageInfo

func (m *SubscribeForEvents_DevicesEventFilter) GetFilterEvents() []SubscribeForEvents_DevicesEventFilter_Event {
	if m != nil {
		return m.FilterEvents
	}
	return nil
}

type SubscribeForEvents_DeviceEventFilter struct {
	DeviceId     string                                       `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	FilterEvents []SubscribeForEvents_DeviceEventFilter_Event `protobuf:"varint,2,rep,packed,name=filter_events,json=filterEvents,proto3,enum=ocf.cloud.grpcgateway.pb.SubscribeForEvents_DeviceEventFilter_Event" json:"filter_events,omitempty"`
}

func (m *SubscribeForEvents_DeviceEventFilter) Reset()         { *m = SubscribeForEvents_DeviceEventFilter{} }
func (m *SubscribeForEvents_DeviceEventFilter) String() string { return proto.CompactTextString(m) }
func (*SubscribeForEvents_DeviceEventFilter) ProtoMessage()    {}
func (*SubscribeForEvents_DeviceEventFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{9, 1}
}
func (m *SubscribeForEvents_DeviceEventFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeForEvents_DeviceEventFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeForEvents_DeviceEventFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeForEvents_DeviceEventFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeForEvents_DeviceEventFilter.Merge(m, src)
}
func (m *SubscribeForEvents_DeviceEventFilter) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeForEvents_DeviceEventFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeForEvents_DeviceEventFilter.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeForEvents_DeviceEventFilter proto.InternalMessageInfo

func (m *SubscribeForEvents_DeviceEventFilter) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *SubscribeForEvents_DeviceEventFilter) GetFilterEvents() []SubscribeForEvents_DeviceEventFilter_Event {
	if m != nil {
		return m.FilterEvents
	}
	return nil
}

type SubscribeForEvents_ResourceEventFilter struct {
	ResourceId   *ResourceId                                    `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	FilterEvents []SubscribeForEvents_ResourceEventFilter_Event `protobuf:"varint,2,rep,packed,name=filter_events,json=filterEvents,proto3,enum=ocf.cloud.grpcgateway.pb.SubscribeForEvents_ResourceEventFilter_Event" json:"filter_events,omitempty"`
}

func (m *SubscribeForEvents_ResourceEventFilter) Reset() {
	*m = SubscribeForEvents_ResourceEventFilter{}
}
func (m *SubscribeForEvents_ResourceEventFilter) String() string { return proto.CompactTextString(m) }
func (*SubscribeForEvents_ResourceEventFilter) ProtoMessage()    {}
func (*SubscribeForEvents_ResourceEventFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{9, 2}
}
func (m *SubscribeForEvents_ResourceEventFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeForEvents_ResourceEventFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeForEvents_ResourceEventFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeForEvents_ResourceEventFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeForEvents_ResourceEventFilter.Merge(m, src)
}
func (m *SubscribeForEvents_ResourceEventFilter) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeForEvents_ResourceEventFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeForEvents_ResourceEventFilter.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeForEvents_ResourceEventFilter proto.InternalMessageInfo

func (m *SubscribeForEvents_ResourceEventFilter) GetResourceId() *ResourceId {
	if m != nil {
		return m.ResourceId
	}
	return nil
}

func (m *SubscribeForEvents_ResourceEventFilter) GetFilterEvents() []SubscribeForEvents_ResourceEventFilter_Event {
	if m != nil {
		return m.FilterEvents
	}
	return nil
}

type SubscribeForEvents_CancelSubscription struct {
	SubscriptionId string `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
}

func (m *SubscribeForEvents_CancelSubscription) Reset()         { *m = SubscribeForEvents_CancelSubscription{} }
func (m *SubscribeForEvents_CancelSubscription) String() string { return proto.CompactTextString(m) }
func (*SubscribeForEvents_CancelSubscription) ProtoMessage()    {}
func (*SubscribeForEvents_CancelSubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{9, 3}
}
func (m *SubscribeForEvents_CancelSubscription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeForEvents_CancelSubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeForEvents_CancelSubscription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeForEvents_CancelSubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeForEvents_CancelSubscription.Merge(m, src)
}
func (m *SubscribeForEvents_CancelSubscription) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeForEvents_CancelSubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeForEvents_CancelSubscription.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeForEvents_CancelSubscription proto.InternalMessageInfo

func (m *SubscribeForEvents_CancelSubscription) GetSubscriptionId() string {
	if m != nil {
		return m.SubscriptionId
	}
	return ""
}

type Event struct {
	SubscriptionId string `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	// Types that are valid to be assigned to Type:
	//	*Event_DeviceRegistered_
	//	*Event_DeviceUnregistered_
	//	*Event_DeviceOnline_
	//	*Event_DeviceOffline_
	//	*Event_ResourcePublished_
	//	*Event_ResourceUnpublished_
	//	*Event_ResourceChanged_
	//	*Event_OperationProcessed_
	//	*Event_SubscriptionCanceled_
	//	*Event_ResourceUpdatePending_
	//	*Event_ResourceUpdated_
	//	*Event_ResourceRetrievePending_
	//	*Event_ResourceRetrieved_
	Type isEvent_Type `protobuf_oneof:"type"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{10}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

type isEvent_Type interface {
	isEvent_Type()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_DeviceRegistered_ struct {
	DeviceRegistered *Event_DeviceRegistered `protobuf:"bytes,3,opt,name=device_registered,json=deviceRegistered,proto3,oneof" json:"device_registered,omitempty"`
}
type Event_DeviceUnregistered_ struct {
	DeviceUnregistered *Event_DeviceUnregistered `protobuf:"bytes,4,opt,name=device_unregistered,json=deviceUnregistered,proto3,oneof" json:"device_unregistered,omitempty"`
}
type Event_DeviceOnline_ struct {
	DeviceOnline *Event_DeviceOnline `protobuf:"bytes,5,opt,name=device_online,json=deviceOnline,proto3,oneof" json:"device_online,omitempty"`
}
type Event_DeviceOffline_ struct {
	DeviceOffline *Event_DeviceOffline `protobuf:"bytes,6,opt,name=device_offline,json=deviceOffline,proto3,oneof" json:"device_offline,omitempty"`
}
type Event_ResourcePublished_ struct {
	ResourcePublished *Event_ResourcePublished `protobuf:"bytes,7,opt,name=resource_published,json=resourcePublished,proto3,oneof" json:"resource_published,omitempty"`
}
type Event_ResourceUnpublished_ struct {
	ResourceUnpublished *Event_ResourceUnpublished `protobuf:"bytes,8,opt,name=resource_unpublished,json=resourceUnpublished,proto3,oneof" json:"resource_unpublished,omitempty"`
}
type Event_ResourceChanged_ struct {
	ResourceChanged *Event_ResourceChanged `protobuf:"bytes,9,opt,name=resource_changed,json=resourceChanged,proto3,oneof" json:"resource_changed,omitempty"`
}
type Event_OperationProcessed_ struct {
	OperationProcessed *Event_OperationProcessed `protobuf:"bytes,10,opt,name=operation_processed,json=operationProcessed,proto3,oneof" json:"operation_processed,omitempty"`
}
type Event_SubscriptionCanceled_ struct {
	SubscriptionCanceled *Event_SubscriptionCanceled `protobuf:"bytes,11,opt,name=subscription_canceled,json=subscriptionCanceled,proto3,oneof" json:"subscription_canceled,omitempty"`
}
type Event_ResourceUpdatePending_ struct {
	ResourceUpdatePending *Event_ResourceUpdatePending `protobuf:"bytes,12,opt,name=resource_update_pending,json=resourceUpdatePending,proto3,oneof" json:"resource_update_pending,omitempty"`
}
type Event_ResourceUpdated_ struct {
	ResourceUpdated *Event_ResourceUpdated `protobuf:"bytes,13,opt,name=resource_updated,json=resourceUpdated,proto3,oneof" json:"resource_updated,omitempty"`
}
type Event_ResourceRetrievePending_ struct {
	ResourceRetrievePending *Event_ResourceRetrievePending `protobuf:"bytes,14,opt,name=resource_retrieve_pending,json=resourceRetrievePending,proto3,oneof" json:"resource_retrieve_pending,omitempty"`
}
type Event_ResourceRetrieved_ struct {
	ResourceRetrieved *Event_ResourceRetrieved `protobuf:"bytes,15,opt,name=resource_retrieved,json=resourceRetrieved,proto3,oneof" json:"resource_retrieved,omitempty"`
}

func (*Event_DeviceRegistered_) isEvent_Type()        {}
func (*Event_DeviceUnregistered_) isEvent_Type()      {}
func (*Event_DeviceOnline_) isEvent_Type()            {}
func (*Event_DeviceOffline_) isEvent_Type()           {}
func (*Event_ResourcePublished_) isEvent_Type()       {}
func (*Event_ResourceUnpublished_) isEvent_Type()     {}
func (*Event_ResourceChanged_) isEvent_Type()         {}
func (*Event_OperationProcessed_) isEvent_Type()      {}
func (*Event_SubscriptionCanceled_) isEvent_Type()    {}
func (*Event_ResourceUpdatePending_) isEvent_Type()   {}
func (*Event_ResourceUpdated_) isEvent_Type()         {}
func (*Event_ResourceRetrievePending_) isEvent_Type() {}
func (*Event_ResourceRetrieved_) isEvent_Type()       {}

func (m *Event) GetType() isEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Event) GetSubscriptionId() string {
	if m != nil {
		return m.SubscriptionId
	}
	return ""
}

func (m *Event) GetDeviceRegistered() *Event_DeviceRegistered {
	if x, ok := m.GetType().(*Event_DeviceRegistered_); ok {
		return x.DeviceRegistered
	}
	return nil
}

func (m *Event) GetDeviceUnregistered() *Event_DeviceUnregistered {
	if x, ok := m.GetType().(*Event_DeviceUnregistered_); ok {
		return x.DeviceUnregistered
	}
	return nil
}

func (m *Event) GetDeviceOnline() *Event_DeviceOnline {
	if x, ok := m.GetType().(*Event_DeviceOnline_); ok {
		return x.DeviceOnline
	}
	return nil
}

func (m *Event) GetDeviceOffline() *Event_DeviceOffline {
	if x, ok := m.GetType().(*Event_DeviceOffline_); ok {
		return x.DeviceOffline
	}
	return nil
}

func (m *Event) GetResourcePublished() *Event_ResourcePublished {
	if x, ok := m.GetType().(*Event_ResourcePublished_); ok {
		return x.ResourcePublished
	}
	return nil
}

func (m *Event) GetResourceUnpublished() *Event_ResourceUnpublished {
	if x, ok := m.GetType().(*Event_ResourceUnpublished_); ok {
		return x.ResourceUnpublished
	}
	return nil
}

func (m *Event) GetResourceChanged() *Event_ResourceChanged {
	if x, ok := m.GetType().(*Event_ResourceChanged_); ok {
		return x.ResourceChanged
	}
	return nil
}

func (m *Event) GetOperationProcessed() *Event_OperationProcessed {
	if x, ok := m.GetType().(*Event_OperationProcessed_); ok {
		return x.OperationProcessed
	}
	return nil
}

func (m *Event) GetSubscriptionCanceled() *Event_SubscriptionCanceled {
	if x, ok := m.GetType().(*Event_SubscriptionCanceled_); ok {
		return x.SubscriptionCanceled
	}
	return nil
}

func (m *Event) GetResourceUpdatePending() *Event_ResourceUpdatePending {
	if x, ok := m.GetType().(*Event_ResourceUpdatePending_); ok {
		return x.ResourceUpdatePending
	}
	return nil
}

func (m *Event) GetResourceUpdated() *Event_ResourceUpdated {
	if x, ok := m.GetType().(*Event_ResourceUpdated_); ok {
		return x.ResourceUpdated
	}
	return nil
}

func (m *Event) GetResourceRetrievePending() *Event_ResourceRetrievePending {
	if x, ok := m.GetType().(*Event_ResourceRetrievePending_); ok {
		return x.ResourceRetrievePending
	}
	return nil
}

func (m *Event) GetResourceRetrieved() *Event_ResourceRetrieved {
	if x, ok := m.GetType().(*Event_ResourceRetrieved_); ok {
		return x.ResourceRetrieved
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Event) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Event_DeviceRegistered_)(nil),
		(*Event_DeviceUnregistered_)(nil),
		(*Event_DeviceOnline_)(nil),
		(*Event_DeviceOffline_)(nil),
		(*Event_ResourcePublished_)(nil),
		(*Event_ResourceUnpublished_)(nil),
		(*Event_ResourceChanged_)(nil),
		(*Event_OperationProcessed_)(nil),
		(*Event_SubscriptionCanceled_)(nil),
		(*Event_ResourceUpdatePending_)(nil),
		(*Event_ResourceUpdated_)(nil),
		(*Event_ResourceRetrievePending_)(nil),
		(*Event_ResourceRetrieved_)(nil),
	}
}

type Event_DeviceRegistered struct {
	DeviceIds []string `protobuf:"bytes,1,rep,name=device_ids,json=deviceIds,proto3" json:"device_ids,omitempty"`
}

func (m *Event_DeviceRegistered) Reset()         { *m = Event_DeviceRegistered{} }
func (m *Event_DeviceRegistered) String() string { return proto.CompactTextString(m) }
func (*Event_DeviceRegistered) ProtoMessage()    {}
func (*Event_DeviceRegistered) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{10, 0}
}
func (m *Event_DeviceRegistered) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_DeviceRegistered) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_DeviceRegistered.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_DeviceRegistered) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_DeviceRegistered.Merge(m, src)
}
func (m *Event_DeviceRegistered) XXX_Size() int {
	return m.Size()
}
func (m *Event_DeviceRegistered) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_DeviceRegistered.DiscardUnknown(m)
}

var xxx_messageInfo_Event_DeviceRegistered proto.InternalMessageInfo

func (m *Event_DeviceRegistered) GetDeviceIds() []string {
	if m != nil {
		return m.DeviceIds
	}
	return nil
}

type Event_DeviceUnregistered struct {
	DeviceIds []string `protobuf:"bytes,1,rep,name=device_ids,json=deviceIds,proto3" json:"device_ids,omitempty"`
}

func (m *Event_DeviceUnregistered) Reset()         { *m = Event_DeviceUnregistered{} }
func (m *Event_DeviceUnregistered) String() string { return proto.CompactTextString(m) }
func (*Event_DeviceUnregistered) ProtoMessage()    {}
func (*Event_DeviceUnregistered) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{10, 1}
}
func (m *Event_DeviceUnregistered) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_DeviceUnregistered) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_DeviceUnregistered.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_DeviceUnregistered) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_DeviceUnregistered.Merge(m, src)
}
func (m *Event_DeviceUnregistered) XXX_Size() int {
	return m.Size()
}
func (m *Event_DeviceUnregistered) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_DeviceUnregistered.DiscardUnknown(m)
}

var xxx_messageInfo_Event_DeviceUnregistered proto.InternalMessageInfo

func (m *Event_DeviceUnregistered) GetDeviceIds() []string {
	if m != nil {
		return m.DeviceIds
	}
	return nil
}

type Event_DeviceOnline struct {
	DeviceIds []string `protobuf:"bytes,1,rep,name=device_ids,json=deviceIds,proto3" json:"device_ids,omitempty"`
}

func (m *Event_DeviceOnline) Reset()         { *m = Event_DeviceOnline{} }
func (m *Event_DeviceOnline) String() string { return proto.CompactTextString(m) }
func (*Event_DeviceOnline) ProtoMessage()    {}
func (*Event_DeviceOnline) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{10, 2}
}
func (m *Event_DeviceOnline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_DeviceOnline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_DeviceOnline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_DeviceOnline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_DeviceOnline.Merge(m, src)
}
func (m *Event_DeviceOnline) XXX_Size() int {
	return m.Size()
}
func (m *Event_DeviceOnline) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_DeviceOnline.DiscardUnknown(m)
}

var xxx_messageInfo_Event_DeviceOnline proto.InternalMessageInfo

func (m *Event_DeviceOnline) GetDeviceIds() []string {
	if m != nil {
		return m.DeviceIds
	}
	return nil
}

type Event_DeviceOffline struct {
	DeviceIds []string `protobuf:"bytes,1,rep,name=device_ids,json=deviceIds,proto3" json:"device_ids,omitempty"`
}

func (m *Event_DeviceOffline) Reset()         { *m = Event_DeviceOffline{} }
func (m *Event_DeviceOffline) String() string { return proto.CompactTextString(m) }
func (*Event_DeviceOffline) ProtoMessage()    {}
func (*Event_DeviceOffline) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{10, 3}
}
func (m *Event_DeviceOffline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_DeviceOffline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_DeviceOffline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_DeviceOffline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_DeviceOffline.Merge(m, src)
}
func (m *Event_DeviceOffline) XXX_Size() int {
	return m.Size()
}
func (m *Event_DeviceOffline) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_DeviceOffline.DiscardUnknown(m)
}

var xxx_messageInfo_Event_DeviceOffline proto.InternalMessageInfo

func (m *Event_DeviceOffline) GetDeviceIds() []string {
	if m != nil {
		return m.DeviceIds
	}
	return nil
}

type Event_ResourcePublished struct {
	Links []*ResourceLink `protobuf:"bytes,1,rep,name=links,proto3" json:"links,omitempty"`
}

func (m *Event_ResourcePublished) Reset()         { *m = Event_ResourcePublished{} }
func (m *Event_ResourcePublished) String() string { return proto.CompactTextString(m) }
func (*Event_ResourcePublished) ProtoMessage()    {}
func (*Event_ResourcePublished) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{10, 4}
}
func (m *Event_ResourcePublished) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_ResourcePublished) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_ResourcePublished.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_ResourcePublished) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_ResourcePublished.Merge(m, src)
}
func (m *Event_ResourcePublished) XXX_Size() int {
	return m.Size()
}
func (m *Event_ResourcePublished) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_ResourcePublished.DiscardUnknown(m)
}

var xxx_messageInfo_Event_ResourcePublished proto.InternalMessageInfo

func (m *Event_ResourcePublished) GetLinks() []*ResourceLink {
	if m != nil {
		return m.Links
	}
	return nil
}

type Event_ResourceUnpublished struct {
	Links []*ResourceLink `protobuf:"bytes,2,rep,name=links,proto3" json:"links,omitempty"`
}

func (m *Event_ResourceUnpublished) Reset()         { *m = Event_ResourceUnpublished{} }
func (m *Event_ResourceUnpublished) String() string { return proto.CompactTextString(m) }
func (*Event_ResourceUnpublished) ProtoMessage()    {}
func (*Event_ResourceUnpublished) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{10, 5}
}
func (m *Event_ResourceUnpublished) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_ResourceUnpublished) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_ResourceUnpublished.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_ResourceUnpublished) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_ResourceUnpublished.Merge(m, src)
}
func (m *Event_ResourceUnpublished) XXX_Size() int {
	return m.Size()
}
func (m *Event_ResourceUnpublished) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_ResourceUnpublished.DiscardUnknown(m)
}

var xxx_messageInfo_Event_ResourceUnpublished proto.InternalMessageInfo

func (m *Event_ResourceUnpublished) GetLinks() []*ResourceLink {
	if m != nil {
		return m.Links
	}
	return nil
}

type Event_ResourceChanged struct {
	ResourceId *ResourceId `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	Content    *Content    `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Status     Status      `protobuf:"varint,3,opt,name=status,proto3,enum=ocf.cloud.grpcgateway.pb.Status" json:"status,omitempty"`
}

func (m *Event_ResourceChanged) Reset()         { *m = Event_ResourceChanged{} }
func (m *Event_ResourceChanged) String() string { return proto.CompactTextString(m) }
func (*Event_ResourceChanged) ProtoMessage()    {}
func (*Event_ResourceChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{10, 6}
}
func (m *Event_ResourceChanged) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_ResourceChanged) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_ResourceChanged.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_ResourceChanged) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_ResourceChanged.Merge(m, src)
}
func (m *Event_ResourceChanged) XXX_Size() int {
	return m.Size()
}
func (m *Event_ResourceChanged) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_ResourceChanged.DiscardUnknown(m)
}

var xxx_messageInfo_Event_ResourceChanged proto.InternalMessageInfo

func (m *Event_ResourceChanged) GetResourceId() *ResourceId {
	if m != nil {
		return m.ResourceId
	}
	return nil
}

func (m *Event_ResourceChanged) GetContent() *Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Event_ResourceChanged) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_UNKNOWN
}

type Event_ResourceUpdatePending struct {
	ResourceId        *ResourceId `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	Content           *Content    `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	ResourceInterface string      `protobuf:"bytes,3,opt,name=resource_interface,json=resourceInterface,proto3" json:"resource_interface,omitempty"`
	CorrelationId     string      `protobuf:"bytes,4,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
}

func (m *Event_ResourceUpdatePending) Reset()         { *m = Event_ResourceUpdatePending{} }
func (m *Event_ResourceUpdatePending) String() string { return proto.CompactTextString(m) }
func (*Event_ResourceUpdatePending) ProtoMessage()    {}
func (*Event_ResourceUpdatePending) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{10, 7}
}
func (m *Event_ResourceUpdatePending) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_ResourceUpdatePending) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_ResourceUpdatePending.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_ResourceUpdatePending) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_ResourceUpdatePending.Merge(m, src)
}
func (m *Event_ResourceUpdatePending) XXX_Size() int {
	return m.Size()
}
func (m *Event_ResourceUpdatePending) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_ResourceUpdatePending.DiscardUnknown(m)
}

var xxx_messageInfo_Event_ResourceUpdatePending proto.InternalMessageInfo

func (m *Event_ResourceUpdatePending) GetResourceId() *ResourceId {
	if m != nil {
		return m.ResourceId
	}
	return nil
}

func (m *Event_ResourceUpdatePending) GetContent() *Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Event_ResourceUpdatePending) GetResourceInterface() string {
	if m != nil {
		return m.ResourceInterface
	}
	return ""
}

func (m *Event_ResourceUpdatePending) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

type Event_ResourceUpdated struct {
	ResourceId    *ResourceId `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	Content       *Content    `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Status        Status      `protobuf:"varint,3,opt,name=status,proto3,enum=ocf.cloud.grpcgateway.pb.Status" json:"status,omitempty"`
	CorrelationId string      `protobuf:"bytes,4,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
}

func (m *Event_ResourceUpdated) Reset()         { *m = Event_ResourceUpdated{} }
func (m *Event_ResourceUpdated) String() string { return proto.CompactTextString(m) }
func (*Event_ResourceUpdated) ProtoMessage()    {}
func (*Event_ResourceUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{10, 8}
}
func (m *Event_ResourceUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_ResourceUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_ResourceUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_ResourceUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_ResourceUpdated.Merge(m, src)
}
func (m *Event_ResourceUpdated) XXX_Size() int {
	return m.Size()
}
func (m *Event_ResourceUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_ResourceUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_Event_ResourceUpdated proto.InternalMessageInfo

func (m *Event_ResourceUpdated) GetResourceId() *ResourceId {
	if m != nil {
		return m.ResourceId
	}
	return nil
}

func (m *Event_ResourceUpdated) GetContent() *Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Event_ResourceUpdated) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_UNKNOWN
}

func (m *Event_ResourceUpdated) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

type Event_ResourceRetrievePending struct {
	ResourceId        *ResourceId `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ResourceInterface string      `protobuf:"bytes,2,opt,name=resource_interface,json=resourceInterface,proto3" json:"resource_interface,omitempty"`
	CorrelationId     string      `protobuf:"bytes,3,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
}

func (m *Event_ResourceRetrievePending) Reset()         { *m = Event_ResourceRetrievePending{} }
func (m *Event_ResourceRetrievePending) String() string { return proto.CompactTextString(m) }
func (*Event_ResourceRetrievePending) ProtoMessage()    {}
func (*Event_ResourceRetrievePending) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{10, 9}
}
func (m *Event_ResourceRetrievePending) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_ResourceRetrievePending) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_ResourceRetrievePending.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_ResourceRetrievePending) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_ResourceRetrievePending.Merge(m, src)
}
func (m *Event_ResourceRetrievePending) XXX_Size() int {
	return m.Size()
}
func (m *Event_ResourceRetrievePending) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_ResourceRetrievePending.DiscardUnknown(m)
}

var xxx_messageInfo_Event_ResourceRetrievePending proto.InternalMessageInfo

func (m *Event_ResourceRetrievePending) GetResourceId() *ResourceId {
	if m != nil {
		return m.ResourceId
	}
	return nil
}

func (m *Event_ResourceRetrievePending) GetResourceInterface() string {
	if m != nil {
		return m.ResourceInterface
	}
	return ""
}

func (m *Event_ResourceRetrievePending) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

type Event_ResourceRetrieved struct {
	ResourceId    *ResourceId `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	Content       *Content    `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Status        Status      `protobuf:"varint,3,opt,name=status,proto3,enum=ocf.cloud.grpcgateway.pb.Status" json:"status,omitempty"`
	CorrelationId string      `protobuf:"bytes,4,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
}

func (m *Event_ResourceRetrieved) Reset()         { *m = Event_ResourceRetrieved{} }
func (m *Event_ResourceRetrieved) String() string { return proto.CompactTextString(m) }
func (*Event_ResourceRetrieved) ProtoMessage()    {}
func (*Event_ResourceRetrieved) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{10, 10}
}
func (m *Event_ResourceRetrieved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_ResourceRetrieved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_ResourceRetrieved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_ResourceRetrieved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_ResourceRetrieved.Merge(m, src)
}
func (m *Event_ResourceRetrieved) XXX_Size() int {
	return m.Size()
}
func (m *Event_ResourceRetrieved) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_ResourceRetrieved.DiscardUnknown(m)
}

var xxx_messageInfo_Event_ResourceRetrieved proto.InternalMessageInfo

func (m *Event_ResourceRetrieved) GetResourceId() *ResourceId {
	if m != nil {
		return m.ResourceId
	}
	return nil
}

func (m *Event_ResourceRetrieved) GetContent() *Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Event_ResourceRetrieved) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_UNKNOWN
}

func (m *Event_ResourceRetrieved) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

type Event_OperationProcessed struct {
	Token       string                                `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ErrorStatus *Event_OperationProcessed_ErrorStatus `protobuf:"bytes,2,opt,name=error_status,json=errorStatus,proto3" json:"error_status,omitempty"`
}

func (m *Event_OperationProcessed) Reset()         { *m = Event_OperationProcessed{} }
func (m *Event_OperationProcessed) String() string { return proto.CompactTextString(m) }
func (*Event_OperationProcessed) ProtoMessage()    {}
func (*Event_OperationProcessed) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{10, 11}
}
func (m *Event_OperationProcessed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_OperationProcessed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_OperationProcessed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_OperationProcessed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_OperationProcessed.Merge(m, src)
}
func (m *Event_OperationProcessed) XXX_Size() int {
	return m.Size()
}
func (m *Event_OperationProcessed) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_OperationProcessed.DiscardUnknown(m)
}

var xxx_messageInfo_Event_OperationProcessed proto.InternalMessageInfo

func (m *Event_OperationProcessed) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Event_OperationProcessed) GetErrorStatus() *Event_OperationProcessed_ErrorStatus {
	if m != nil {
		return m.ErrorStatus
	}
	return nil
}

type Event_OperationProcessed_ErrorStatus struct {
	Code    Event_OperationProcessed_ErrorStatus_Code `protobuf:"varint,1,opt,name=code,proto3,enum=ocf.cloud.grpcgateway.pb.Event_OperationProcessed_ErrorStatus_Code" json:"code,omitempty"`
	Message string                                    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Event_OperationProcessed_ErrorStatus) Reset()         { *m = Event_OperationProcessed_ErrorStatus{} }
func (m *Event_OperationProcessed_ErrorStatus) String() string { return proto.CompactTextString(m) }
func (*Event_OperationProcessed_ErrorStatus) ProtoMessage()    {}
func (*Event_OperationProcessed_ErrorStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{10, 11, 0}
}
func (m *Event_OperationProcessed_ErrorStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_OperationProcessed_ErrorStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_OperationProcessed_ErrorStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_OperationProcessed_ErrorStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_OperationProcessed_ErrorStatus.Merge(m, src)
}
func (m *Event_OperationProcessed_ErrorStatus) XXX_Size() int {
	return m.Size()
}
func (m *Event_OperationProcessed_ErrorStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_OperationProcessed_ErrorStatus.DiscardUnknown(m)
}

var xxx_messageInfo_Event_OperationProcessed_ErrorStatus proto.InternalMessageInfo

func (m *Event_OperationProcessed_ErrorStatus) GetCode() Event_OperationProcessed_ErrorStatus_Code {
	if m != nil {
		return m.Code
	}
	return Event_OperationProcessed_ErrorStatus_OK
}

func (m *Event_OperationProcessed_ErrorStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Event_SubscriptionCanceled struct {
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *Event_SubscriptionCanceled) Reset()         { *m = Event_SubscriptionCanceled{} }
func (m *Event_SubscriptionCanceled) String() string { return proto.CompactTextString(m) }
func (*Event_SubscriptionCanceled) ProtoMessage()    {}
func (*Event_SubscriptionCanceled) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{10, 12}
}
func (m *Event_SubscriptionCanceled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_SubscriptionCanceled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_SubscriptionCanceled.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_SubscriptionCanceled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_SubscriptionCanceled.Merge(m, src)
}
func (m *Event_SubscriptionCanceled) XXX_Size() int {
	return m.Size()
}
func (m *Event_SubscriptionCanceled) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_SubscriptionCanceled.DiscardUnknown(m)
}

var xxx_messageInfo_Event_SubscriptionCanceled proto.InternalMessageInfo

func (m *Event_SubscriptionCanceled) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type LocalizedString struct {
	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	Value    string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *LocalizedString) Reset()         { *m = LocalizedString{} }
func (m *LocalizedString) String() string { return proto.CompactTextString(m) }
func (*LocalizedString) ProtoMessage()    {}
func (*LocalizedString) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{11}
}
func (m *LocalizedString) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalizedString) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocalizedString.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocalizedString) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalizedString.Merge(m, src)
}
func (m *LocalizedString) XXX_Size() int {
	return m.Size()
}
func (m *LocalizedString) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalizedString.DiscardUnknown(m)
}

var xxx_messageInfo_LocalizedString proto.InternalMessageInfo

func (m *LocalizedString) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *LocalizedString) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Device struct {
	Id                    string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Types                 []string           `protobuf:"bytes,2,rep,name=types,proto3" json:"types,omitempty"`
	Name                  string             `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	IsOnline              bool               `protobuf:"varint,4,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`
	ManufacturerName      []*LocalizedString `protobuf:"bytes,5,rep,name=manufacturer_name,json=manufacturerName,proto3" json:"manufacturer_name,omitempty"`
	ModelNumber           string             `protobuf:"bytes,6,opt,name=model_number,json=modelNumber,proto3" json:"model_number,omitempty"`
	Interfaces            []string           `protobuf:"bytes,7,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	ProtocolIndependentId string             `protobuf:"bytes,8,opt,name=protocol_independent_id,json=protocolIndependentId,proto3" json:"protocol_independent_id,omitempty"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{12}
}
func (m *Device) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Device.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(m, src)
}
func (m *Device) XXX_Size() int {
	return m.Size()
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Device) GetTypes() []string {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *Device) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device) GetIsOnline() bool {
	if m != nil {
		return m.IsOnline
	}
	return false
}

func (m *Device) GetManufacturerName() []*LocalizedString {
	if m != nil {
		return m.ManufacturerName
	}
	return nil
}

func (m *Device) GetModelNumber() string {
	if m != nil {
		return m.ModelNumber
	}
	return ""
}

func (m *Device) GetInterfaces() []string {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *Device) GetProtocolIndependentId() string {
	if m != nil {
		return m.ProtocolIndependentId
	}
	return ""
}

type Policies struct {
	BitFlags int32 `protobuf:"varint,1,opt,name=bit_flags,json=bitFlags,proto3" json:"bit_flags,omitempty"`
}

func (m *Policies) Reset()         { *m = Policies{} }
func (m *Policies) String() string { return proto.CompactTextString(m) }
func (*Policies) ProtoMessage()    {}
func (*Policies) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{13}
}
func (m *Policies) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Policies) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Policies.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Policies) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Policies.Merge(m, src)
}
func (m *Policies) XXX_Size() int {
	return m.Size()
}
func (m *Policies) XXX_DiscardUnknown() {
	xxx_messageInfo_Policies.DiscardUnknown(m)
}

var xxx_messageInfo_Policies proto.InternalMessageInfo

func (m *Policies) GetBitFlags() int32 {
	if m != nil {
		return m.BitFlags
	}
	return 0
}

type EndpointInformation struct {
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Priority int64  `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (m *EndpointInformation) Reset()         { *m = EndpointInformation{} }
func (m *EndpointInformation) String() string { return proto.CompactTextString(m) }
func (*EndpointInformation) ProtoMessage()    {}
func (*EndpointInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{14}
}
func (m *EndpointInformation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndpointInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndpointInformation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndpointInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndpointInformation.Merge(m, src)
}
func (m *EndpointInformation) XXX_Size() int {
	return m.Size()
}
func (m *EndpointInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_EndpointInformation.DiscardUnknown(m)
}

var xxx_messageInfo_EndpointInformation proto.InternalMessageInfo

func (m *EndpointInformation) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *EndpointInformation) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

type ResourceLink struct {
	Href                  string                 `protobuf:"bytes,1,opt,name=href,proto3" json:"href,omitempty"`
	Types                 []string               `protobuf:"bytes,2,rep,name=types,proto3" json:"types,omitempty"`
	Interfaces            []string               `protobuf:"bytes,3,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	DeviceId              string                 `protobuf:"bytes,4,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	InstanceId            int64                  `protobuf:"varint,5,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Anchor                string                 `protobuf:"bytes,6,opt,name=anchor,proto3" json:"anchor,omitempty"`
	Policies              *Policies              `protobuf:"bytes,7,opt,name=policies,proto3" json:"policies,omitempty"`
	Title                 string                 `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	SupportedContentTypes []string               `protobuf:"bytes,9,rep,name=supported_content_types,json=supportedContentTypes,proto3" json:"supported_content_types,omitempty"`
	EndpointInformations  []*EndpointInformation `protobuf:"bytes,10,rep,name=endpoint_informations,json=endpointInformations,proto3" json:"endpoint_informations,omitempty"`
}

func (m *ResourceLink) Reset()         { *m = ResourceLink{} }
func (m *ResourceLink) String() string { return proto.CompactTextString(m) }
func (*ResourceLink) ProtoMessage()    {}
func (*ResourceLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{15}
}
func (m *ResourceLink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceLink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceLink.Merge(m, src)
}
func (m *ResourceLink) XXX_Size() int {
	return m.Size()
}
func (m *ResourceLink) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceLink.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceLink proto.InternalMessageInfo

func (m *ResourceLink) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *ResourceLink) GetTypes() []string {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *ResourceLink) GetInterfaces() []string {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *ResourceLink) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *ResourceLink) GetInstanceId() int64 {
	if m != nil {
		return m.InstanceId
	}
	return 0
}

func (m *ResourceLink) GetAnchor() string {
	if m != nil {
		return m.Anchor
	}
	return ""
}

func (m *ResourceLink) GetPolicies() *Policies {
	if m != nil {
		return m.Policies
	}
	return nil
}

func (m *ResourceLink) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ResourceLink) GetSupportedContentTypes() []string {
	if m != nil {
		return m.SupportedContentTypes
	}
	return nil
}

func (m *ResourceLink) GetEndpointInformations() []*EndpointInformation {
	if m != nil {
		return m.EndpointInformations
	}
	return nil
}

type Content struct {
	ContentType string `protobuf:"bytes,1,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	Data        []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Content) Reset()         { *m = Content{} }
func (m *Content) String() string { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()    {}
func (*Content) Descriptor() ([]byte, []int) {
	return fileDescriptor_77b741aa538b323a, []int{16}
}
func (m *Content) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Content) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Content.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Content) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Content.Merge(m, src)
}
func (m *Content) XXX_Size() int {
	return m.Size()
}
func (m *Content) XXX_DiscardUnknown() {
	xxx_messageInfo_Content.DiscardUnknown(m)
}

var xxx_messageInfo_Content proto.InternalMessageInfo

func (m *Content) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *Content) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("ocf.cloud.grpcgateway.pb.Status", Status_name, Status_value)
	proto.RegisterEnum("ocf.cloud.grpcgateway.pb.GetDevicesRequest_Status", GetDevicesRequest_Status_name, GetDevicesRequest_Status_value)
	proto.RegisterEnum("ocf.cloud.grpcgateway.pb.SubscribeForEvents_DevicesEventFilter_Event", SubscribeForEvents_DevicesEventFilter_Event_name, SubscribeForEvents_DevicesEventFilter_Event_value)
	proto.RegisterEnum("ocf.cloud.grpcgateway.pb.SubscribeForEvents_DeviceEventFilter_Event", SubscribeForEvents_DeviceEventFilter_Event_name, SubscribeForEvents_DeviceEventFilter_Event_value)
	proto.RegisterEnum("ocf.cloud.grpcgateway.pb.SubscribeForEvents_ResourceEventFilter_Event", SubscribeForEvents_ResourceEventFilter_Event_name, SubscribeForEvents_ResourceEventFilter_Event_value)
	proto.RegisterEnum("ocf.cloud.grpcgateway.pb.Event_OperationProcessed_ErrorStatus_Code", Event_OperationProcessed_ErrorStatus_Code_name, Event_OperationProcessed_ErrorStatus_Code_value)
	proto.RegisterType((*GetDevicesRequest)(nil), "ocf.cloud.grpcgateway.pb.GetDevicesRequest")
	proto.RegisterType((*GetResourceLinksRequest)(nil), "ocf.cloud.grpcgateway.pb.GetResourceLinksRequest")
	proto.RegisterType((*ResourceId)(nil), "ocf.cloud.grpcgateway.pb.ResourceId")
	proto.RegisterType((*RetrieveResourceFromDeviceRequest)(nil), "ocf.cloud.grpcgateway.pb.RetrieveResourceFromDeviceRequest")
	proto.RegisterType((*RetrieveResourceFromDeviceResponse)(nil), "ocf.cloud.grpcgateway.pb.RetrieveResourceFromDeviceResponse")
	proto.RegisterType((*RetrieveResourcesValuesRequest)(nil), "ocf.cloud.grpcgateway.pb.RetrieveResourcesValuesRequest")
	proto.RegisterType((*ResourceValue)(nil), "ocf.cloud.grpcgateway.pb.ResourceValue")
	proto.RegisterType((*UpdateResourceValuesRequest)(nil), "ocf.cloud.grpcgateway.pb.UpdateResourceValuesRequest")
	proto.RegisterType((*UpdateResourceValuesResponse)(nil), "ocf.cloud.grpcgateway.pb.UpdateResourceValuesResponse")
	proto.RegisterType((*SubscribeForEvents)(nil), "ocf.cloud.grpcgateway.pb.SubscribeForEvents")
	proto.RegisterType((*SubscribeForEvents_DevicesEventFilter)(nil), "ocf.cloud.grpcgateway.pb.SubscribeForEvents.DevicesEventFilter")
	proto.RegisterType((*SubscribeForEvents_DeviceEventFilter)(nil), "ocf.cloud.grpcgateway.pb.SubscribeForEvents.DeviceEventFilter")
	proto.RegisterType((*SubscribeForEvents_ResourceEventFilter)(nil), "ocf.cloud.grpcgateway.pb.SubscribeForEvents.ResourceEventFilter")
	proto.RegisterType((*SubscribeForEvents_CancelSubscription)(nil), "ocf.cloud.grpcgateway.pb.SubscribeForEvents.CancelSubscription")
	proto.RegisterType((*Event)(nil), "ocf.cloud.grpcgateway.pb.Event")
	proto.RegisterType((*Event_DeviceRegistered)(nil), "ocf.cloud.grpcgateway.pb.Event.DeviceRegistered")
	proto.RegisterType((*Event_DeviceUnregistered)(nil), "ocf.cloud.grpcgateway.pb.Event.DeviceUnregistered")
	proto.RegisterType((*Event_DeviceOnline)(nil), "ocf.cloud.grpcgateway.pb.Event.DeviceOnline")
	proto.RegisterType((*Event_DeviceOffline)(nil), "ocf.cloud.grpcgateway.pb.Event.DeviceOffline")
	proto.RegisterType((*Event_ResourcePublished)(nil), "ocf.cloud.grpcgateway.pb.Event.ResourcePublished")
	proto.RegisterType((*Event_ResourceUnpublished)(nil), "ocf.cloud.grpcgateway.pb.Event.ResourceUnpublished")
	proto.RegisterType((*Event_ResourceChanged)(nil), "ocf.cloud.grpcgateway.pb.Event.ResourceChanged")
	proto.RegisterType((*Event_ResourceUpdatePending)(nil), "ocf.cloud.grpcgateway.pb.Event.ResourceUpdatePending")
	proto.RegisterType((*Event_ResourceUpdated)(nil), "ocf.cloud.grpcgateway.pb.Event.ResourceUpdated")
	proto.RegisterType((*Event_ResourceRetrievePending)(nil), "ocf.cloud.grpcgateway.pb.Event.ResourceRetrievePending")
	proto.RegisterType((*Event_ResourceRetrieved)(nil), "ocf.cloud.grpcgateway.pb.Event.ResourceRetrieved")
	proto.RegisterType((*Event_OperationProcessed)(nil), "ocf.cloud.grpcgateway.pb.Event.OperationProcessed")
	proto.RegisterType((*Event_OperationProcessed_ErrorStatus)(nil), "ocf.cloud.grpcgateway.pb.Event.OperationProcessed.ErrorStatus")
	proto.RegisterType((*Event_SubscriptionCanceled)(nil), "ocf.cloud.grpcgateway.pb.Event.SubscriptionCanceled")
	proto.RegisterType((*LocalizedString)(nil), "ocf.cloud.grpcgateway.pb.LocalizedString")
	proto.RegisterType((*Device)(nil), "ocf.cloud.grpcgateway.pb.Device")
	proto.RegisterType((*Policies)(nil), "ocf.cloud.grpcgateway.pb.Policies")
	proto.RegisterType((*EndpointInformation)(nil), "ocf.cloud.grpcgateway.pb.EndpointInformation")
	proto.RegisterType((*ResourceLink)(nil), "ocf.cloud.grpcgateway.pb.ResourceLink")
	proto.RegisterType((*Content)(nil), "ocf.cloud.grpcgateway.pb.Content")
}

func init() {
	proto.RegisterFile("github.com/plgd-dev/cloud/grpc-gateway/pb/devices.proto", fileDescriptor_77b741aa538b323a)
}

var fileDescriptor_77b741aa538b323a = []byte{
	// 2046 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x59, 0xcd, 0x6f, 0xeb, 0x58,
	0x15, 0x8f, 0xf3, 0xd5, 0xe4, 0xe4, 0xa3, 0xee, 0x6d, 0x3b, 0xcd, 0xe4, 0xcd, 0x74, 0xfa, 0x2c,
	0x60, 0xca, 0x68, 0x9a, 0x32, 0x7d, 0xc0, 0x20, 0x0d, 0x33, 0x4c, 0x9b, 0x38, 0x4d, 0x34, 0x7d,
	0x4e, 0xe7, 0x26, 0x79, 0x4f, 0x1a, 0x21, 0x59, 0x8e, 0x7d, 0x93, 0x9a, 0xa6, 0xb6, 0xb1, 0x9d,
	0xa2, 0xf2, 0x57, 0xb0, 0x41, 0x88, 0x05, 0x12, 0x12, 0x12, 0x0b, 0x96, 0x2c, 0x58, 0xb0, 0x43,
	0xb0, 0x60, 0xc7, 0x5b, 0xb2, 0x60, 0x81, 0xde, 0x5b, 0xb0, 0x66, 0x83, 0x58, 0x22, 0x5f, 0xfb,
	0xda, 0xce, 0x57, 0x9b, 0xbe, 0xf7, 0x24, 0x18, 0xb1, 0xcb, 0x39, 0xf7, 0x9e, 0xf3, 0x3b, 0x5f,
	0xf7, 0xdc, 0x7b, 0x1c, 0xf8, 0x70, 0xa4, 0xbb, 0x17, 0x93, 0x41, 0x4d, 0x35, 0xaf, 0x0e, 0xad,
	0xf1, 0x48, 0x3b, 0xd0, 0xc8, 0xf5, 0xa1, 0x3a, 0x36, 0x27, 0xda, 0xe1, 0xc8, 0xb6, 0xd4, 0x83,
	0x91, 0xe2, 0x92, 0x1f, 0x29, 0x37, 0x87, 0xd6, 0xe0, 0x50, 0x23, 0xd7, 0xba, 0x4a, 0x9c, 0x9a,
	0x65, 0x9b, 0xae, 0x89, 0x2a, 0xa6, 0x3a, 0xac, 0xd1, 0x8d, 0x35, 0x6f, 0x63, 0xb0, 0xaf, 0x66,
	0x0d, 0x84, 0xbf, 0x71, 0xb0, 0x71, 0x4a, 0xdc, 0x86, 0xbf, 0x1d, 0x93, 0x1f, 0x4e, 0x88, 0xe3,
	0xa2, 0x77, 0xa0, 0xe0, 0xde, 0x58, 0x44, 0x1e, 0xea, 0x63, 0x97, 0xd8, 0x15, 0x6e, 0x2f, 0xb5,
	0x9f, 0xc7, 0xe0, 0xb1, 0x9a, 0x94, 0x83, 0x9e, 0x42, 0xc9, 0x71, 0x15, 0x77, 0xe2, 0xb0, 0x2d,
	0xc9, 0xbd, 0xd4, 0x7e, 0xf9, 0xe8, 0xa8, 0xb6, 0x0c, 0xa8, 0x36, 0x07, 0x52, 0xeb, 0x52, 0x05,
	0xb8, 0xe8, 0x2b, 0x0a, 0x14, 0xbf, 0x07, 0x1b, 0xbe, 0xe9, 0xb2, 0xae, 0x85, 0xca, 0x53, 0x14,
	0x7f, 0xdd, 0x5f, 0x68, 0x6b, 0xc1, 0x5e, 0xe1, 0x21, 0x64, 0x7d, 0x1d, 0x08, 0x20, 0xdb, 0x91,
	0xce, 0xda, 0x92, 0xc8, 0x27, 0x50, 0x01, 0xd6, 0x3a, 0xcd, 0x26, 0x25, 0x38, 0x61, 0x08, 0x3b,
	0xa7, 0xc4, 0xc5, 0xc4, 0x31, 0x27, 0xb6, 0x4a, 0xce, 0x74, 0xe3, 0x72, 0x75, 0x1f, 0x17, 0x9a,
	0x92, 0x5c, 0x6c, 0xca, 0xc7, 0x00, 0x0c, 0xa4, 0xad, 0xa1, 0x07, 0x90, 0x0f, 0x25, 0x2b, 0xdc,
	0x1e, 0xb7, 0x9f, 0xc7, 0x39, 0x26, 0x81, 0x10, 0xa4, 0x2f, 0x6c, 0x32, 0xac, 0x24, 0x29, 0x9f,
	0xfe, 0x16, 0x7e, 0xce, 0xc1, 0x43, 0x4c, 0x5c, 0x5b, 0x27, 0xd7, 0x84, 0xe9, 0x69, 0xda, 0xe6,
	0x95, 0x1f, 0x31, 0x66, 0xb1, 0x08, 0x05, 0x3b, 0x58, 0x64, 0x8a, 0x0b, 0x47, 0x5f, 0x59, 0x1e,
	0xf2, 0xc8, 0x22, 0x0c, 0x76, 0x64, 0xdd, 0x01, 0xa0, 0x48, 0x8d, 0xe1, 0x12, 0x7b, 0xa8, 0xa8,
	0x24, 0x30, 0x67, 0x23, 0xdc, 0xc7, 0x16, 0x04, 0x05, 0x84, 0xdb, 0x4c, 0x73, 0x2c, 0xd3, 0x70,
	0x08, 0xfa, 0x08, 0xd6, 0x54, 0xd3, 0x70, 0x89, 0xe1, 0x06, 0x76, 0x3d, 0x5c, 0x6e, 0x57, 0xdd,
	0xdf, 0x88, 0x99, 0x84, 0xf0, 0x47, 0x0e, 0x76, 0x67, 0x31, 0x9c, 0x27, 0xca, 0x78, 0x12, 0x55,
	0x64, 0x0f, 0x36, 0x63, 0xbe, 0x3b, 0xf1, 0xac, 0xad, 0x1a, 0x83, 0xc8, 0x37, 0xcd, 0xb9, 0x7f,
	0x8a, 0x67, 0xeb, 0x25, 0x35, 0x5b, 0x2f, 0xc2, 0x0b, 0x0e, 0x4a, 0x0c, 0x8e, 0x1a, 0xff, 0xba,
	0x12, 0xb6, 0x05, 0x19, 0x0f, 0xc6, 0x09, 0x2c, 0xf3, 0x89, 0x78, 0xc4, 0x53, 0xf7, 0x8d, 0x38,
	0xfa, 0x0e, 0x64, 0xfd, 0x63, 0x57, 0x49, 0xef, 0x71, 0xfb, 0xe5, 0xa3, 0xbd, 0xe5, 0xb2, 0xc1,
	0x31, 0x0d, 0xf6, 0x0b, 0xcf, 0x38, 0x78, 0xd0, 0xb7, 0x34, 0xc5, 0x25, 0x53, 0xbe, 0x3a, 0xaf,
	0xb9, 0x48, 0x63, 0xde, 0x25, 0xef, 0xed, 0xdd, 0xe2, 0x0a, 0x4f, 0x2d, 0xab, 0xf0, 0x9f, 0x72,
	0xf0, 0xd6, 0x62, 0x97, 0x5e, 0x43, 0x71, 0xc7, 0x42, 0x9d, 0xbc, 0x67, 0xa8, 0x7f, 0x06, 0x80,
	0xba, 0x93, 0x81, 0xa3, 0xda, 0xfa, 0x80, 0x34, 0x4d, 0x5b, 0xbc, 0x26, 0x86, 0xeb, 0xa0, 0x21,
	0x94, 0x82, 0xee, 0x2e, 0x93, 0xeb, 0xc8, 0xa6, 0xef, 0xdd, 0xa2, 0x77, 0x4e, 0x49, 0x2d, 0xe8,
	0xc5, 0x94, 0xf2, 0xeb, 0xb7, 0x95, 0xc0, 0x45, 0x2d, 0xc6, 0x45, 0x2a, 0x04, 0x74, 0x00, 0xe3,
	0xe7, 0xe1, 0x93, 0x97, 0x80, 0x99, 0x46, 0x29, 0x68, 0x11, 0x13, 0xe9, 0x50, 0x0e, 0x53, 0xe5,
	0xc3, 0xf8, 0xc5, 0xfc, 0xe9, 0xbd, 0x60, 0x58, 0xde, 0xa6, 0x81, 0x4a, 0x76, 0x9c, 0x8d, 0x6c,
	0xd8, 0x54, 0x15, 0x43, 0x25, 0x63, 0xd9, 0xf1, 0x35, 0x58, 0xae, 0x6e, 0x1a, 0x95, 0xcc, 0x4b,
	0x44, 0xaf, 0x4e, 0xf5, 0x74, 0x63, 0x6a, 0x5a, 0x09, 0x8c, 0xd4, 0x39, 0x2e, 0x3d, 0xba, 0xe6,
	0x25, 0x31, 0x2a, 0x84, 0x16, 0x9f, 0x4f, 0x54, 0xff, 0xc4, 0x01, 0x9a, 0x4f, 0x00, 0xfa, 0x01,
	0x94, 0xfc, 0xe6, 0xe2, 0x47, 0xc2, 0xa1, 0xdd, 0xad, 0x7c, 0x24, 0xbe, 0x62, 0x62, 0x6b, 0xf4,
	0x37, 0x2e, 0xfa, 0xba, 0xfd, 0x6d, 0xc2, 0x09, 0x64, 0xfc, 0xa8, 0x94, 0x01, 0xb0, 0x78, 0xda,
	0xee, 0xf6, 0x44, 0x2c, 0x36, 0xf8, 0x04, 0xe2, 0xa1, 0xd8, 0x97, 0x62, 0x1c, 0x2e, 0x76, 0xb9,
	0x26, 0xe3, 0x97, 0x6b, 0xaa, 0xfa, 0x87, 0x24, 0x6c, 0xcc, 0x25, 0xf8, 0xf6, 0xcb, 0x4f, 0x9f,
	0x75, 0xd1, 0x7f, 0x37, 0x34, 0x5e, 0xad, 0xa8, 0x16, 0x7a, 0xf8, 0x2b, 0x8e, 0xb9, 0xf8, 0x06,
	0x20, 0x2c, 0x76, 0x3b, 0x7d, 0x5c, 0x17, 0xe5, 0xf3, 0xfe, 0xc9, 0x59, 0xbb, 0xdb, 0xa2, 0xae,
	0x56, 0x60, 0x2b, 0xe4, 0xf7, 0xa5, 0x68, 0x85, 0x43, 0x0f, 0x60, 0x27, 0x5a, 0x39, 0x6f, 0x1c,
	0xf7, 0x44, 0xf9, 0x5c, 0x94, 0x1a, 0x6d, 0xe9, 0x94, 0x4f, 0xa2, 0x2d, 0xe0, 0x67, 0x16, 0x1b,
	0x7c, 0x0a, 0xbd, 0x0d, 0x6f, 0x86, 0x5c, 0x2c, 0xf6, 0x70, 0x5b, 0x7c, 0x12, 0x09, 0xa5, 0xa7,
	0x6c, 0x60, 0xcb, 0x0d, 0x3e, 0x53, 0xfd, 0x07, 0x07, 0x9b, 0x0b, 0xaa, 0xf7, 0x75, 0xb5, 0xd1,
	0xcb, 0xc5, 0xf1, 0x6e, 0xbe, 0xea, 0xe9, 0x5a, 0x18, 0xf1, 0xb7, 0x58, 0xc0, 0x37, 0x61, 0xbd,
	0xde, 0x91, 0x7a, 0xa2, 0xd4, 0x93, 0xeb, 0xad, 0x63, 0xe9, 0xd4, 0x8b, 0x76, 0xf5, 0x63, 0x40,
	0xf3, 0xc7, 0x06, 0xbd, 0x0b, 0xeb, 0xf1, 0xd3, 0x18, 0xd5, 0x4c, 0x39, 0xce, 0x6e, 0x6b, 0x27,
	0x05, 0xc8, 0x07, 0x9e, 0x0c, 0x6e, 0x84, 0x5f, 0xbf, 0xc9, 0xa0, 0x56, 0x95, 0x47, 0x72, 0x78,
	0xd5, 0xdb, 0x64, 0xa4, 0x3b, 0x2e, 0xb1, 0x89, 0x16, 0xf4, 0x9a, 0x6f, 0x2c, 0x8f, 0x06, 0x05,
	0xa9, 0xb1, 0xb7, 0x0e, 0x93, 0x6b, 0x25, 0x30, 0xaf, 0xcd, 0xf0, 0x10, 0x81, 0xcd, 0x00, 0x60,
	0x62, 0xc4, 0x20, 0xd2, 0x14, 0xe2, 0x68, 0x35, 0x88, 0x7e, 0x4c, 0xd2, 0xeb, 0x28, 0xda, 0x1c,
	0x17, 0x75, 0x59, 0xf7, 0x97, 0x4d, 0x63, 0xac, 0x1b, 0x24, 0xe8, 0x5f, 0xef, 0xaf, 0x06, 0xd0,
	0xa1, 0x32, 0x51, 0xab, 0xf7, 0x69, 0xf4, 0x04, 0xca, 0x4c, 0xe9, 0x70, 0x48, 0xb5, 0x66, 0xa9,
	0xd6, 0x83, 0x15, 0xb5, 0xfa, 0x42, 0x5e, 0xcb, 0xd5, 0xe2, 0x0c, 0x34, 0x88, 0x5d, 0xc4, 0xd6,
	0x64, 0x30, 0xd6, 0x9d, 0x0b, 0xa2, 0x55, 0xd6, 0xa8, 0xee, 0x0f, 0xee, 0xd2, 0xcd, 0xca, 0xee,
	0x9c, 0x09, 0xb6, 0x12, 0xd1, 0xed, 0x1d, 0x32, 0xd1, 0x05, 0x6c, 0x85, 0x18, 0x13, 0x23, 0x42,
	0xc9, 0x51, 0x94, 0x47, 0xab, 0xa2, 0xf4, 0x23, 0xd1, 0x56, 0x02, 0x87, 0x8f, 0xcd, 0x18, 0x1b,
	0x7d, 0x1f, 0xf8, 0x10, 0x49, 0xbd, 0x50, 0x8c, 0x11, 0xd1, 0x2a, 0x79, 0x8a, 0x72, 0xb8, 0x2a,
	0x4a, 0xdd, 0x17, 0x6b, 0x25, 0xf0, 0xba, 0x3d, 0xcd, 0xf2, 0xea, 0xc7, 0xb4, 0x88, 0xad, 0xd0,
	0x32, 0xb6, 0x6c, 0x53, 0x25, 0x8e, 0x43, 0xb4, 0x0a, 0xac, 0x56, 0x3f, 0x1d, 0x26, 0x7a, 0xce,
	0x24, 0xbd, 0xfa, 0x31, 0xe7, 0xb8, 0xe8, 0x12, 0xb6, 0xa7, 0x0e, 0x8c, 0x7f, 0x69, 0x11, 0xad,
	0x52, 0xa0, 0x40, 0xdf, 0xbc, 0x0b, 0x28, 0x7e, 0x7a, 0xeb, 0x81, 0x6c, 0x2b, 0x81, 0xb7, 0x9c,
	0x05, 0x7c, 0x64, 0xc2, 0x4e, 0x94, 0x1b, 0xfa, 0xc2, 0x92, 0x2d, 0x62, 0x68, 0xba, 0x31, 0xaa,
	0x14, 0x29, 0xdc, 0xb7, 0x56, 0x4e, 0x0f, 0x95, 0x3e, 0xf7, 0x85, 0x5b, 0x09, 0xbc, 0x6d, 0x2f,
	0x5a, 0x98, 0x4a, 0x91, 0x0f, 0xa8, 0x55, 0x4a, 0xf7, 0x4b, 0x91, 0xaf, 0x70, 0x2a, 0x45, 0x01,
	0x0b, 0x4d, 0xe0, 0xcd, 0x50, 0xbb, 0x1d, 0xcc, 0x2b, 0xa1, 0x43, 0x65, 0x0a, 0xf3, 0xe1, 0xaa,
	0x30, 0x6c, 0xde, 0x89, 0x5c, 0x0a, 0x43, 0x35, 0xb3, 0x34, 0x75, 0x8a, 0x18, 0xac, 0x56, 0x59,
	0xbf, 0xdf, 0x29, 0x62, 0x4a, 0xa7, 0x4e, 0x51, 0xc8, 0xac, 0x7e, 0x00, 0xfc, 0x6c, 0x97, 0x43,
	0x6f, 0x03, 0x44, 0xd3, 0x51, 0x30, 0x20, 0xe7, 0xc3, 0xb1, 0xa8, 0xfa, 0x88, 0x3d, 0x62, 0xa6,
	0xfa, 0xd3, 0x1d, 0x42, 0x07, 0x50, 0x8c, 0x77, 0xa2, 0xbb, 0xb6, 0xd7, 0xa0, 0x34, 0xd5, 0x62,
	0xee, 0xda, 0xff, 0x39, 0x6c, 0xcc, 0xb5, 0x0d, 0xf4, 0x5d, 0xc8, 0x8c, 0xbd, 0xc9, 0x3f, 0x98,
	0x16, 0xbf, 0x76, 0xf7, 0x2d, 0x7a, 0xa6, 0x1b, 0x97, 0xd8, 0x17, 0xaa, 0x76, 0xa3, 0x0b, 0x3a,
	0xde, 0x0c, 0x42, 0xa5, 0xc9, 0x97, 0x51, 0xfa, 0x17, 0x0e, 0xd6, 0x67, 0x7a, 0xc2, 0xff, 0xc4,
	0xe4, 0x14, 0x0d, 0x2b, 0xa9, 0xfb, 0x0d, 0x2b, 0xd5, 0x7f, 0x72, 0xb0, 0xbd, 0xf0, 0xb0, 0x7e,
	0x09, 0x27, 0x42, 0xf4, 0x55, 0x28, 0xab, 0xa6, 0x6d, 0x93, 0xb1, 0xc2, 0x1e, 0x15, 0x69, 0xba,
	0xb5, 0x14, 0xe3, 0xb6, 0xb5, 0xea, 0xbf, 0x62, 0x59, 0x64, 0x3d, 0xe2, 0x4b, 0x9d, 0xc5, 0x55,
	0x1d, 0xff, 0x1d, 0x07, 0x3b, 0x4b, 0x1a, 0xd9, 0x7f, 0xe7, 0x2b, 0xd5, 0x02, 0xc3, 0x53, 0x8b,
	0x0c, 0xff, 0x37, 0x17, 0x35, 0x88, 0xb0, 0xf9, 0xfd, 0x7f, 0xe4, 0xec, 0xf7, 0x49, 0x40, 0xf3,
	0xaf, 0x84, 0x68, 0x42, 0xe5, 0x62, 0x13, 0x2a, 0x52, 0xa0, 0x48, 0x6c, 0xdb, 0xb4, 0xe5, 0xd8,
	0xa7, 0x8b, 0x5b, 0x67, 0xff, 0x65, 0xaf, 0x90, 0x9a, 0xe8, 0xa9, 0x09, 0x2c, 0x2e, 0x90, 0x88,
	0xa8, 0xfe, 0x86, 0x83, 0x42, 0x6c, 0x11, 0x3d, 0x85, 0xb4, 0x6a, 0x6a, 0x84, 0xda, 0x51, 0x3e,
	0xaa, 0xbf, 0x1a, 0x54, 0xad, 0x6e, 0x6a, 0x04, 0x53, 0x85, 0xa8, 0x02, 0x6b, 0x57, 0xc4, 0x71,
	0x94, 0x11, 0x2b, 0x1f, 0x46, 0x0a, 0xfb, 0x90, 0xf6, 0xf6, 0xa1, 0x2c, 0x24, 0x3b, 0x9f, 0xf1,
	0x09, 0x94, 0x87, 0x8c, 0x88, 0x71, 0x07, 0xf3, 0x1c, 0x2a, 0x41, 0x5e, 0xea, 0xf4, 0xe4, 0x66,
	0xa7, 0x2f, 0x35, 0xf8, 0x64, 0xb5, 0x06, 0x5b, 0x8b, 0x1e, 0x3e, 0xe8, 0x0d, 0xc8, 0xda, 0x44,
	0x71, 0x4c, 0x23, 0x50, 0x1d, 0x50, 0x27, 0x59, 0x48, 0xbb, 0x37, 0x16, 0x11, 0xea, 0xb0, 0x7e,
	0x66, 0xaa, 0xca, 0x58, 0xff, 0x31, 0xd1, 0xba, 0xae, 0xed, 0x9d, 0x8f, 0x2a, 0xe4, 0xc6, 0x8a,
	0x31, 0x9a, 0x78, 0xf6, 0x04, 0xe3, 0x31, 0xa3, 0xbd, 0x64, 0x5c, 0x2b, 0xe3, 0x09, 0x33, 0xd4,
	0x27, 0x84, 0xdf, 0x26, 0x21, 0xeb, 0xdf, 0x82, 0xa8, 0x0c, 0xc9, 0x70, 0xc2, 0x49, 0xea, 0xcb,
	0x3e, 0x0d, 0x22, 0x48, 0x1b, 0xca, 0x15, 0xeb, 0x6f, 0xf4, 0xb7, 0x37, 0x96, 0xeb, 0x0e, 0x9b,
	0x19, 0xbc, 0x02, 0xc9, 0xe1, 0x9c, 0xee, 0x84, 0xef, 0xff, 0x8d, 0x2b, 0xc5, 0x98, 0x0c, 0x15,
	0xd5, 0x9d, 0xd8, 0xc4, 0x96, 0xa9, 0x74, 0x86, 0x5e, 0x6c, 0x5f, 0x5f, 0x9e, 0x88, 0x19, 0xcf,
	0x30, 0x1f, 0xd7, 0x21, 0x79, 0xa0, 0x0f, 0xa1, 0x78, 0x65, 0x6a, 0x64, 0x2c, 0x1b, 0x93, 0xab,
	0x01, 0xb1, 0xe9, 0x54, 0x91, 0xc7, 0x05, 0xca, 0x93, 0x28, 0x0b, 0xed, 0x02, 0x84, 0xc7, 0xdb,
	0xa9, 0xac, 0xf9, 0x5f, 0x55, 0x23, 0x0e, 0xfa, 0x36, 0xec, 0xd0, 0xff, 0x30, 0x54, 0x73, 0x2c,
	0xeb, 0x86, 0x46, 0xbc, 0xe7, 0x16, 0x31, 0x5c, 0xaf, 0xcc, 0x73, 0x54, 0xdb, 0x36, 0x5b, 0x6e,
	0x47, 0xab, 0x6d, 0x4d, 0x78, 0x17, 0x72, 0xe7, 0xe6, 0x58, 0x57, 0x75, 0xe2, 0x78, 0xbe, 0x0f,
	0x74, 0x57, 0x1e, 0x8e, 0x95, 0x91, 0x43, 0x83, 0x97, 0xc1, 0xb9, 0x81, 0xee, 0x36, 0x3d, 0x5a,
	0x78, 0x0c, 0x9b, 0xa2, 0xa1, 0x59, 0xa6, 0x6e, 0xb8, 0x6d, 0x63, 0x68, 0xda, 0x57, 0xb4, 0xaa,
	0xbc, 0x34, 0x91, 0x80, 0xcd, 0xd2, 0xc4, 0x68, 0x6f, 0xcd, 0xb2, 0x75, 0xd3, 0xd6, 0xdd, 0x1b,
	0x9a, 0xa9, 0x14, 0x0e, 0x69, 0xe1, 0x97, 0x29, 0x28, 0xc6, 0x6f, 0xfc, 0xf0, 0x7b, 0x3f, 0x17,
	0x7d, 0xef, 0x5f, 0x92, 0xb6, 0xe9, 0x50, 0xa4, 0xe6, 0x42, 0x31, 0xf5, 0x65, 0x25, 0x3d, 0xf3,
	0x65, 0xe5, 0x1d, 0x28, 0xe8, 0x86, 0xe3, 0x7a, 0x85, 0xe9, 0x2d, 0x67, 0xa8, 0x59, 0xc0, 0x58,
	0x6d, 0x5a, 0xaa, 0x8a, 0xa1, 0x5e, 0x98, 0x2c, 0x0b, 0x01, 0x85, 0x3e, 0x81, 0x9c, 0x15, 0x04,
	0x2a, 0x98, 0xcc, 0x84, 0xe5, 0x29, 0x67, 0x21, 0xc5, 0xa1, 0x0c, 0xf5, 0x45, 0x77, 0xc7, 0x24,
	0x48, 0x87, 0x4f, 0x78, 0x69, 0x73, 0x26, 0x96, 0x65, 0xda, 0x2e, 0xd1, 0xe4, 0xa0, 0xc7, 0xc9,
	0xbe, 0xcf, 0x79, 0xea, 0xd8, 0x76, 0xb8, 0x1c, 0xb4, 0xc2, 0x1e, 0x8d, 0xc1, 0x00, 0xb6, 0x59,
	0x98, 0x65, 0x3d, 0x4a, 0x87, 0x53, 0x01, 0x5a, 0x8d, 0xb7, 0x0d, 0xa4, 0xf3, 0x49, 0xc4, 0x5b,
	0x64, 0x9e, 0xe9, 0x08, 0x9f, 0xc2, 0x5a, 0x80, 0xe9, 0x15, 0x68, 0xdc, 0xb8, 0x20, 0x49, 0x05,
	0x35, 0x32, 0xc9, 0xcb, 0x9f, 0xa6, 0xb8, 0x0a, 0x4d, 0x74, 0x11, 0xd3, 0xdf, 0xef, 0xfd, 0x82,
	0x0b, 0xff, 0x7a, 0x2a, 0xc0, 0x5a, 0x5f, 0xfa, 0x4c, 0xea, 0x3c, 0x95, 0xf8, 0x44, 0xd0, 0x48,
	0x38, 0xb4, 0x0e, 0x85, 0x93, 0xe3, 0x86, 0x8c, 0xc5, 0xcf, 0xfb, 0x62, 0xb7, 0xc7, 0x27, 0xfd,
	0xaf, 0x6a, 0xc7, 0xfd, 0x5e, 0xab, 0x83, 0xdb, 0x5f, 0xd0, 0xef, 0x45, 0x25, 0xc8, 0x37, 0x3b,
	0xf8, 0xa4, 0xdd, 0x68, 0x88, 0x12, 0x9f, 0x9e, 0xee, 0x37, 0x19, 0x4f, 0x41, 0x5f, 0x3a, 0x7e,
	0x72, 0xdc, 0x3e, 0x3b, 0x3e, 0x39, 0x13, 0xf9, 0x2c, 0xda, 0x84, 0x75, 0x6f, 0xbd, 0xfd, 0xf8,
	0xfc, 0x4c, 0x7c, 0x2c, 0x4a, 0x3d, 0xb1, 0xc1, 0xaf, 0xa1, 0x22, 0xe4, 0x8e, 0xeb, 0x75, 0xf1,
	0xdc, 0xa3, 0x72, 0x51, 0xf7, 0xca, 0x9f, 0x34, 0xff, 0xfc, 0x7c, 0x97, 0x7b, 0xf6, 0x7c, 0x97,
	0xfb, 0xfb, 0xf3, 0x5d, 0xee, 0x27, 0x2f, 0x76, 0x13, 0xcf, 0x5e, 0xec, 0x26, 0xfe, 0xfa, 0x62,
	0x37, 0xf1, 0xc5, 0xfb, 0x2b, 0xff, 0x85, 0xf8, 0x91, 0x35, 0x18, 0x64, 0xe9, 0xd9, 0x7a, 0xf4,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x75, 0x54, 0xaf, 0x25, 0x79, 0x1c, 0x00, 0x00,
}

func (m *GetDevicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDevicesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDevicesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeviceIdsFilter) > 0 {
		for iNdEx := len(m.DeviceIdsFilter) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DeviceIdsFilter[iNdEx])
			copy(dAtA[i:], m.DeviceIdsFilter[iNdEx])
			i = encodeVarintDevices(dAtA, i, uint64(len(m.DeviceIdsFilter[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.StatusFilter) > 0 {
		dAtA2 := make([]byte, len(m.StatusFilter)*10)
		var j1 int
		for _, num := range m.StatusFilter {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintDevices(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TypeFilter) > 0 {
		for iNdEx := len(m.TypeFilter) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TypeFilter[iNdEx])
			copy(dAtA[i:], m.TypeFilter[iNdEx])
			i = encodeVarintDevices(dAtA, i, uint64(len(m.TypeFilter[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetResourceLinksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResourceLinksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetResourceLinksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeviceIdsFilter) > 0 {
		for iNdEx := len(m.DeviceIdsFilter) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DeviceIdsFilter[iNdEx])
			copy(dAtA[i:], m.DeviceIdsFilter[iNdEx])
			i = encodeVarintDevices(dAtA, i, uint64(len(m.DeviceIdsFilter[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TypeFilter) > 0 {
		for iNdEx := len(m.TypeFilter) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TypeFilter[iNdEx])
			copy(dAtA[i:], m.TypeFilter[iNdEx])
			i = encodeVarintDevices(dAtA, i, uint64(len(m.TypeFilter[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResourceId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Href) > 0 {
		i -= len(m.Href)
		copy(dAtA[i:], m.Href)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.Href)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeviceId) > 0 {
		i -= len(m.DeviceId)
		copy(dAtA[i:], m.DeviceId)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.DeviceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveResourceFromDeviceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveResourceFromDeviceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveResourceFromDeviceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResourceInterface) > 0 {
		i -= len(m.ResourceInterface)
		copy(dAtA[i:], m.ResourceInterface)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.ResourceInterface)))
		i--
		dAtA[i] = 0x12
	}
	if m.ResourceId != nil {
		{
			size, err := m.ResourceId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveResourceFromDeviceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveResourceFromDeviceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveResourceFromDeviceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveResourcesValuesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveResourcesValuesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveResourcesValuesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TypeFilter) > 0 {
		for iNdEx := len(m.TypeFilter) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TypeFilter[iNdEx])
			copy(dAtA[i:], m.TypeFilter[iNdEx])
			i = encodeVarintDevices(dAtA, i, uint64(len(m.TypeFilter[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DeviceIdsFilter) > 0 {
		for iNdEx := len(m.DeviceIdsFilter) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DeviceIdsFilter[iNdEx])
			copy(dAtA[i:], m.DeviceIdsFilter[iNdEx])
			i = encodeVarintDevices(dAtA, i, uint64(len(m.DeviceIdsFilter[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ResourceIdsFilter) > 0 {
		for iNdEx := len(m.ResourceIdsFilter) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResourceIdsFilter[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDevices(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResourceValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintDevices(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Types) > 0 {
		for iNdEx := len(m.Types) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Types[iNdEx])
			copy(dAtA[i:], m.Types[iNdEx])
			i = encodeVarintDevices(dAtA, i, uint64(len(m.Types[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ResourceId != nil {
		{
			size, err := m.ResourceId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateResourceValuesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateResourceValuesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateResourceValuesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResourceInterface) > 0 {
		i -= len(m.ResourceInterface)
		copy(dAtA[i:], m.ResourceInterface)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.ResourceInterface)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ResourceId != nil {
		{
			size, err := m.ResourceId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateResourceValuesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateResourceValuesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateResourceValuesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintDevices(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeForEvents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeForEvents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeForEvents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if m.FilterBy != nil {
		{
			size := m.FilterBy.Size()
			i -= size
			if _, err := m.FilterBy.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeForEvents_DevicesEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeForEvents_DevicesEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DevicesEvent != nil {
		{
			size, err := m.DevicesEvent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *SubscribeForEvents_DeviceEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeForEvents_DeviceEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeviceEvent != nil {
		{
			size, err := m.DeviceEvent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SubscribeForEvents_ResourceEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeForEvents_ResourceEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ResourceEvent != nil {
		{
			size, err := m.ResourceEvent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SubscribeForEvents_CancelSubscription_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeForEvents_CancelSubscription_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CancelSubscription != nil {
		{
			size, err := m.CancelSubscription.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *SubscribeForEvents_DevicesEventFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeForEvents_DevicesEventFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeForEvents_DevicesEventFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FilterEvents) > 0 {
		dAtA15 := make([]byte, len(m.FilterEvents)*10)
		var j14 int
		for _, num := range m.FilterEvents {
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		i -= j14
		copy(dAtA[i:], dAtA15[:j14])
		i = encodeVarintDevices(dAtA, i, uint64(j14))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeForEvents_DeviceEventFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeForEvents_DeviceEventFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeForEvents_DeviceEventFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FilterEvents) > 0 {
		dAtA17 := make([]byte, len(m.FilterEvents)*10)
		var j16 int
		for _, num := range m.FilterEvents {
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		i -= j16
		copy(dAtA[i:], dAtA17[:j16])
		i = encodeVarintDevices(dAtA, i, uint64(j16))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeviceId) > 0 {
		i -= len(m.DeviceId)
		copy(dAtA[i:], m.DeviceId)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.DeviceId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeForEvents_ResourceEventFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeForEvents_ResourceEventFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeForEvents_ResourceEventFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FilterEvents) > 0 {
		dAtA19 := make([]byte, len(m.FilterEvents)*10)
		var j18 int
		for _, num := range m.FilterEvents {
			for num >= 1<<7 {
				dAtA19[j18] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j18++
			}
			dAtA19[j18] = uint8(num)
			j18++
		}
		i -= j18
		copy(dAtA[i:], dAtA19[:j18])
		i = encodeVarintDevices(dAtA, i, uint64(j18))
		i--
		dAtA[i] = 0x12
	}
	if m.ResourceId != nil {
		{
			size, err := m.ResourceId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeForEvents_CancelSubscription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeForEvents_CancelSubscription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeForEvents_CancelSubscription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubscriptionId) > 0 {
		i -= len(m.SubscriptionId)
		copy(dAtA[i:], m.SubscriptionId)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.SubscriptionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size := m.Type.Size()
			i -= size
			if _, err := m.Type.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.SubscriptionId) > 0 {
		i -= len(m.SubscriptionId)
		copy(dAtA[i:], m.SubscriptionId)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.SubscriptionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Event_DeviceRegistered_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_DeviceRegistered_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeviceRegistered != nil {
		{
			size, err := m.DeviceRegistered.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Event_DeviceUnregistered_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_DeviceUnregistered_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeviceUnregistered != nil {
		{
			size, err := m.DeviceUnregistered.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Event_DeviceOnline_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_DeviceOnline_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeviceOnline != nil {
		{
			size, err := m.DeviceOnline.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Event_DeviceOffline_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_DeviceOffline_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeviceOffline != nil {
		{
			size, err := m.DeviceOffline.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *Event_ResourcePublished_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_ResourcePublished_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ResourcePublished != nil {
		{
			size, err := m.ResourcePublished.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *Event_ResourceUnpublished_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_ResourceUnpublished_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ResourceUnpublished != nil {
		{
			size, err := m.ResourceUnpublished.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *Event_ResourceChanged_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_ResourceChanged_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ResourceChanged != nil {
		{
			size, err := m.ResourceChanged.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *Event_OperationProcessed_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_OperationProcessed_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OperationProcessed != nil {
		{
			size, err := m.OperationProcessed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *Event_SubscriptionCanceled_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_SubscriptionCanceled_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SubscriptionCanceled != nil {
		{
			size, err := m.SubscriptionCanceled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}
func (m *Event_ResourceUpdatePending_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_ResourceUpdatePending_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ResourceUpdatePending != nil {
		{
			size, err := m.ResourceUpdatePending.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	return len(dAtA) - i, nil
}
func (m *Event_ResourceUpdated_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_ResourceUpdated_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ResourceUpdated != nil {
		{
			size, err := m.ResourceUpdated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	return len(dAtA) - i, nil
}
func (m *Event_ResourceRetrievePending_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_ResourceRetrievePending_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ResourceRetrievePending != nil {
		{
			size, err := m.ResourceRetrievePending.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	return len(dAtA) - i, nil
}
func (m *Event_ResourceRetrieved_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_ResourceRetrieved_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ResourceRetrieved != nil {
		{
			size, err := m.ResourceRetrieved.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	return len(dAtA) - i, nil
}
func (m *Event_DeviceRegistered) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_DeviceRegistered) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_DeviceRegistered) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeviceIds) > 0 {
		for iNdEx := len(m.DeviceIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DeviceIds[iNdEx])
			copy(dAtA[i:], m.DeviceIds[iNdEx])
			i = encodeVarintDevices(dAtA, i, uint64(len(m.DeviceIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Event_DeviceUnregistered) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_DeviceUnregistered) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_DeviceUnregistered) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeviceIds) > 0 {
		for iNdEx := len(m.DeviceIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DeviceIds[iNdEx])
			copy(dAtA[i:], m.DeviceIds[iNdEx])
			i = encodeVarintDevices(dAtA, i, uint64(len(m.DeviceIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Event_DeviceOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_DeviceOnline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_DeviceOnline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeviceIds) > 0 {
		for iNdEx := len(m.DeviceIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DeviceIds[iNdEx])
			copy(dAtA[i:], m.DeviceIds[iNdEx])
			i = encodeVarintDevices(dAtA, i, uint64(len(m.DeviceIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Event_DeviceOffline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_DeviceOffline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_DeviceOffline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeviceIds) > 0 {
		for iNdEx := len(m.DeviceIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DeviceIds[iNdEx])
			copy(dAtA[i:], m.DeviceIds[iNdEx])
			i = encodeVarintDevices(dAtA, i, uint64(len(m.DeviceIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Event_ResourcePublished) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_ResourcePublished) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_ResourcePublished) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Links) > 0 {
		for iNdEx := len(m.Links) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Links[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDevices(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Event_ResourceUnpublished) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_ResourceUnpublished) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_ResourceUnpublished) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Links) > 0 {
		for iNdEx := len(m.Links) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Links[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDevices(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *Event_ResourceChanged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_ResourceChanged) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_ResourceChanged) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintDevices(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ResourceId != nil {
		{
			size, err := m.ResourceId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Event_ResourceUpdatePending) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_ResourceUpdatePending) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_ResourceUpdatePending) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CorrelationId) > 0 {
		i -= len(m.CorrelationId)
		copy(dAtA[i:], m.CorrelationId)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.CorrelationId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ResourceInterface) > 0 {
		i -= len(m.ResourceInterface)
		copy(dAtA[i:], m.ResourceInterface)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.ResourceInterface)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ResourceId != nil {
		{
			size, err := m.ResourceId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Event_ResourceUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_ResourceUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_ResourceUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CorrelationId) > 0 {
		i -= len(m.CorrelationId)
		copy(dAtA[i:], m.CorrelationId)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.CorrelationId)))
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintDevices(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ResourceId != nil {
		{
			size, err := m.ResourceId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Event_ResourceRetrievePending) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_ResourceRetrievePending) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_ResourceRetrievePending) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CorrelationId) > 0 {
		i -= len(m.CorrelationId)
		copy(dAtA[i:], m.CorrelationId)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.CorrelationId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ResourceInterface) > 0 {
		i -= len(m.ResourceInterface)
		copy(dAtA[i:], m.ResourceInterface)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.ResourceInterface)))
		i--
		dAtA[i] = 0x12
	}
	if m.ResourceId != nil {
		{
			size, err := m.ResourceId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Event_ResourceRetrieved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_ResourceRetrieved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_ResourceRetrieved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CorrelationId) > 0 {
		i -= len(m.CorrelationId)
		copy(dAtA[i:], m.CorrelationId)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.CorrelationId)))
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintDevices(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ResourceId != nil {
		{
			size, err := m.ResourceId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Event_OperationProcessed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_OperationProcessed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_OperationProcessed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ErrorStatus != nil {
		{
			size, err := m.ErrorStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Event_OperationProcessed_ErrorStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_OperationProcessed_ErrorStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_OperationProcessed_ErrorStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintDevices(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Event_SubscriptionCanceled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_SubscriptionCanceled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_SubscriptionCanceled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *LocalizedString) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalizedString) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalizedString) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Language) > 0 {
		i -= len(m.Language)
		copy(dAtA[i:], m.Language)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.Language)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Device) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Device) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Device) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProtocolIndependentId) > 0 {
		i -= len(m.ProtocolIndependentId)
		copy(dAtA[i:], m.ProtocolIndependentId)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.ProtocolIndependentId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Interfaces) > 0 {
		for iNdEx := len(m.Interfaces) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Interfaces[iNdEx])
			copy(dAtA[i:], m.Interfaces[iNdEx])
			i = encodeVarintDevices(dAtA, i, uint64(len(m.Interfaces[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ModelNumber) > 0 {
		i -= len(m.ModelNumber)
		copy(dAtA[i:], m.ModelNumber)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.ModelNumber)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ManufacturerName) > 0 {
		for iNdEx := len(m.ManufacturerName) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ManufacturerName[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDevices(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.IsOnline {
		i--
		if m.IsOnline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Types) > 0 {
		for iNdEx := len(m.Types) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Types[iNdEx])
			copy(dAtA[i:], m.Types[iNdEx])
			i = encodeVarintDevices(dAtA, i, uint64(len(m.Types[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Policies) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Policies) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Policies) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BitFlags != 0 {
		i = encodeVarintDevices(dAtA, i, uint64(m.BitFlags))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EndpointInformation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndpointInformation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndpointInformation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Priority != 0 {
		i = encodeVarintDevices(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResourceLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EndpointInformations) > 0 {
		for iNdEx := len(m.EndpointInformations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EndpointInformations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDevices(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.SupportedContentTypes) > 0 {
		for iNdEx := len(m.SupportedContentTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SupportedContentTypes[iNdEx])
			copy(dAtA[i:], m.SupportedContentTypes[iNdEx])
			i = encodeVarintDevices(dAtA, i, uint64(len(m.SupportedContentTypes[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x42
	}
	if m.Policies != nil {
		{
			size, err := m.Policies.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDevices(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Anchor) > 0 {
		i -= len(m.Anchor)
		copy(dAtA[i:], m.Anchor)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.Anchor)))
		i--
		dAtA[i] = 0x32
	}
	if m.InstanceId != 0 {
		i = encodeVarintDevices(dAtA, i, uint64(m.InstanceId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.DeviceId) > 0 {
		i -= len(m.DeviceId)
		copy(dAtA[i:], m.DeviceId)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.DeviceId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Interfaces) > 0 {
		for iNdEx := len(m.Interfaces) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Interfaces[iNdEx])
			copy(dAtA[i:], m.Interfaces[iNdEx])
			i = encodeVarintDevices(dAtA, i, uint64(len(m.Interfaces[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Types) > 0 {
		for iNdEx := len(m.Types) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Types[iNdEx])
			copy(dAtA[i:], m.Types[iNdEx])
			i = encodeVarintDevices(dAtA, i, uint64(len(m.Types[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Href) > 0 {
		i -= len(m.Href)
		copy(dAtA[i:], m.Href)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.Href)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Content) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Content) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Content) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContentType) > 0 {
		i -= len(m.ContentType)
		copy(dAtA[i:], m.ContentType)
		i = encodeVarintDevices(dAtA, i, uint64(len(m.ContentType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDevices(dAtA []byte, offset int, v uint64) int {
	offset -= sovDevices(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetDevicesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TypeFilter) > 0 {
		for _, s := range m.TypeFilter {
			l = len(s)
			n += 1 + l + sovDevices(uint64(l))
		}
	}
	if len(m.StatusFilter) > 0 {
		l = 0
		for _, e := range m.StatusFilter {
			l += sovDevices(uint64(e))
		}
		n += 1 + sovDevices(uint64(l)) + l
	}
	if len(m.DeviceIdsFilter) > 0 {
		for _, s := range m.DeviceIdsFilter {
			l = len(s)
			n += 1 + l + sovDevices(uint64(l))
		}
	}
	return n
}

func (m *GetResourceLinksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TypeFilter) > 0 {
		for _, s := range m.TypeFilter {
			l = len(s)
			n += 1 + l + sovDevices(uint64(l))
		}
	}
	if len(m.DeviceIdsFilter) > 0 {
		for _, s := range m.DeviceIdsFilter {
			l = len(s)
			n += 1 + l + sovDevices(uint64(l))
		}
	}
	return n
}

func (m *ResourceId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}

func (m *RetrieveResourceFromDeviceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceId != nil {
		l = m.ResourceId.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	l = len(m.ResourceInterface)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}

func (m *RetrieveResourceFromDeviceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}

func (m *RetrieveResourcesValuesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ResourceIdsFilter) > 0 {
		for _, e := range m.ResourceIdsFilter {
			l = e.Size()
			n += 1 + l + sovDevices(uint64(l))
		}
	}
	if len(m.DeviceIdsFilter) > 0 {
		for _, s := range m.DeviceIdsFilter {
			l = len(s)
			n += 1 + l + sovDevices(uint64(l))
		}
	}
	if len(m.TypeFilter) > 0 {
		for _, s := range m.TypeFilter {
			l = len(s)
			n += 1 + l + sovDevices(uint64(l))
		}
	}
	return n
}

func (m *ResourceValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceId != nil {
		l = m.ResourceId.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	if len(m.Types) > 0 {
		for _, s := range m.Types {
			l = len(s)
			n += 1 + l + sovDevices(uint64(l))
		}
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovDevices(uint64(m.Status))
	}
	return n
}

func (m *UpdateResourceValuesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceId != nil {
		l = m.ResourceId.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	l = len(m.ResourceInterface)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}

func (m *UpdateResourceValuesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovDevices(uint64(m.Status))
	}
	return n
}

func (m *SubscribeForEvents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FilterBy != nil {
		n += m.FilterBy.Size()
	}
	l = len(m.Token)
	if l > 0 {
		n += 2 + l + sovDevices(uint64(l))
	}
	return n
}

func (m *SubscribeForEvents_DevicesEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DevicesEvent != nil {
		l = m.DevicesEvent.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}
func (m *SubscribeForEvents_DeviceEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceEvent != nil {
		l = m.DeviceEvent.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}
func (m *SubscribeForEvents_ResourceEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceEvent != nil {
		l = m.ResourceEvent.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}
func (m *SubscribeForEvents_CancelSubscription_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CancelSubscription != nil {
		l = m.CancelSubscription.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}
func (m *SubscribeForEvents_DevicesEventFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FilterEvents) > 0 {
		l = 0
		for _, e := range m.FilterEvents {
			l += sovDevices(uint64(e))
		}
		n += 1 + sovDevices(uint64(l)) + l
	}
	return n
}

func (m *SubscribeForEvents_DeviceEventFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	if len(m.FilterEvents) > 0 {
		l = 0
		for _, e := range m.FilterEvents {
			l += sovDevices(uint64(e))
		}
		n += 1 + sovDevices(uint64(l)) + l
	}
	return n
}

func (m *SubscribeForEvents_ResourceEventFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceId != nil {
		l = m.ResourceId.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	if len(m.FilterEvents) > 0 {
		l = 0
		for _, e := range m.FilterEvents {
			l += sovDevices(uint64(e))
		}
		n += 1 + sovDevices(uint64(l)) + l
	}
	return n
}

func (m *SubscribeForEvents_CancelSubscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubscriptionId)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}

func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubscriptionId)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	if m.Type != nil {
		n += m.Type.Size()
	}
	return n
}

func (m *Event_DeviceRegistered_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceRegistered != nil {
		l = m.DeviceRegistered.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}
func (m *Event_DeviceUnregistered_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceUnregistered != nil {
		l = m.DeviceUnregistered.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}
func (m *Event_DeviceOnline_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceOnline != nil {
		l = m.DeviceOnline.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}
func (m *Event_DeviceOffline_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeviceOffline != nil {
		l = m.DeviceOffline.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}
func (m *Event_ResourcePublished_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourcePublished != nil {
		l = m.ResourcePublished.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}
func (m *Event_ResourceUnpublished_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceUnpublished != nil {
		l = m.ResourceUnpublished.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}
func (m *Event_ResourceChanged_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceChanged != nil {
		l = m.ResourceChanged.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}
func (m *Event_OperationProcessed_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperationProcessed != nil {
		l = m.OperationProcessed.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}
func (m *Event_SubscriptionCanceled_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubscriptionCanceled != nil {
		l = m.SubscriptionCanceled.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}
func (m *Event_ResourceUpdatePending_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceUpdatePending != nil {
		l = m.ResourceUpdatePending.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}
func (m *Event_ResourceUpdated_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceUpdated != nil {
		l = m.ResourceUpdated.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}
func (m *Event_ResourceRetrievePending_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceRetrievePending != nil {
		l = m.ResourceRetrievePending.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}
func (m *Event_ResourceRetrieved_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceRetrieved != nil {
		l = m.ResourceRetrieved.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}
func (m *Event_DeviceRegistered) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DeviceIds) > 0 {
		for _, s := range m.DeviceIds {
			l = len(s)
			n += 1 + l + sovDevices(uint64(l))
		}
	}
	return n
}

func (m *Event_DeviceUnregistered) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DeviceIds) > 0 {
		for _, s := range m.DeviceIds {
			l = len(s)
			n += 1 + l + sovDevices(uint64(l))
		}
	}
	return n
}

func (m *Event_DeviceOnline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DeviceIds) > 0 {
		for _, s := range m.DeviceIds {
			l = len(s)
			n += 1 + l + sovDevices(uint64(l))
		}
	}
	return n
}

func (m *Event_DeviceOffline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DeviceIds) > 0 {
		for _, s := range m.DeviceIds {
			l = len(s)
			n += 1 + l + sovDevices(uint64(l))
		}
	}
	return n
}

func (m *Event_ResourcePublished) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Links) > 0 {
		for _, e := range m.Links {
			l = e.Size()
			n += 1 + l + sovDevices(uint64(l))
		}
	}
	return n
}

func (m *Event_ResourceUnpublished) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Links) > 0 {
		for _, e := range m.Links {
			l = e.Size()
			n += 1 + l + sovDevices(uint64(l))
		}
	}
	return n
}

func (m *Event_ResourceChanged) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceId != nil {
		l = m.ResourceId.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovDevices(uint64(m.Status))
	}
	return n
}

func (m *Event_ResourceUpdatePending) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceId != nil {
		l = m.ResourceId.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	l = len(m.ResourceInterface)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	l = len(m.CorrelationId)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}

func (m *Event_ResourceUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceId != nil {
		l = m.ResourceId.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovDevices(uint64(m.Status))
	}
	l = len(m.CorrelationId)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}

func (m *Event_ResourceRetrievePending) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceId != nil {
		l = m.ResourceId.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	l = len(m.ResourceInterface)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	l = len(m.CorrelationId)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}

func (m *Event_ResourceRetrieved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResourceId != nil {
		l = m.ResourceId.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovDevices(uint64(m.Status))
	}
	l = len(m.CorrelationId)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}

func (m *Event_OperationProcessed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	if m.ErrorStatus != nil {
		l = m.ErrorStatus.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}

func (m *Event_OperationProcessed_ErrorStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDevices(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}

func (m *Event_SubscriptionCanceled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}

func (m *LocalizedString) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}

func (m *Device) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	if len(m.Types) > 0 {
		for _, s := range m.Types {
			l = len(s)
			n += 1 + l + sovDevices(uint64(l))
		}
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	if m.IsOnline {
		n += 2
	}
	if len(m.ManufacturerName) > 0 {
		for _, e := range m.ManufacturerName {
			l = e.Size()
			n += 1 + l + sovDevices(uint64(l))
		}
	}
	l = len(m.ModelNumber)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	if len(m.Interfaces) > 0 {
		for _, s := range m.Interfaces {
			l = len(s)
			n += 1 + l + sovDevices(uint64(l))
		}
	}
	l = len(m.ProtocolIndependentId)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}

func (m *Policies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BitFlags != 0 {
		n += 1 + sovDevices(uint64(m.BitFlags))
	}
	return n
}

func (m *EndpointInformation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	if m.Priority != 0 {
		n += 1 + sovDevices(uint64(m.Priority))
	}
	return n
}

func (m *ResourceLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	if len(m.Types) > 0 {
		for _, s := range m.Types {
			l = len(s)
			n += 1 + l + sovDevices(uint64(l))
		}
	}
	if len(m.Interfaces) > 0 {
		for _, s := range m.Interfaces {
			l = len(s)
			n += 1 + l + sovDevices(uint64(l))
		}
	}
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	if m.InstanceId != 0 {
		n += 1 + sovDevices(uint64(m.InstanceId))
	}
	l = len(m.Anchor)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	if m.Policies != nil {
		l = m.Policies.Size()
		n += 1 + l + sovDevices(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	if len(m.SupportedContentTypes) > 0 {
		for _, s := range m.SupportedContentTypes {
			l = len(s)
			n += 1 + l + sovDevices(uint64(l))
		}
	}
	if len(m.EndpointInformations) > 0 {
		for _, e := range m.EndpointInformations {
			l = e.Size()
			n += 1 + l + sovDevices(uint64(l))
		}
	}
	return n
}

func (m *Content) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContentType)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovDevices(uint64(l))
	}
	return n
}

func sovDevices(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDevices(x uint64) (n int) {
	return sovDevices(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetDevicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDevicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDevicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeFilter = append(m.TypeFilter, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v GetDevicesRequest_Status
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDevices
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= GetDevicesRequest_Status(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StatusFilter = append(m.StatusFilter, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDevices
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDevices
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDevices
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.StatusFilter) == 0 {
					m.StatusFilter = make([]GetDevicesRequest_Status, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v GetDevicesRequest_Status
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDevices
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= GetDevicesRequest_Status(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StatusFilter = append(m.StatusFilter, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusFilter", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceIdsFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceIdsFilter = append(m.DeviceIdsFilter, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResourceLinksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResourceLinksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResourceLinksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeFilter = append(m.TypeFilter, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceIdsFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceIdsFilter = append(m.DeviceIdsFilter, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Href", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Href = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveResourceFromDeviceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveResourceFromDeviceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveResourceFromDeviceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceId == nil {
				m.ResourceId = &ResourceId{}
			}
			if err := m.ResourceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceInterface = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveResourceFromDeviceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveResourceFromDeviceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveResourceFromDeviceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &Content{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveResourcesValuesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveResourcesValuesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveResourcesValuesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceIdsFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceIdsFilter = append(m.ResourceIdsFilter, &ResourceId{})
			if err := m.ResourceIdsFilter[len(m.ResourceIdsFilter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceIdsFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceIdsFilter = append(m.DeviceIdsFilter, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeFilter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeFilter = append(m.TypeFilter, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceId == nil {
				m.ResourceId = &ResourceId{}
			}
			if err := m.ResourceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Types = append(m.Types, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &Content{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateResourceValuesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateResourceValuesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateResourceValuesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceId == nil {
				m.ResourceId = &ResourceId{}
			}
			if err := m.ResourceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &Content{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceInterface = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateResourceValuesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateResourceValuesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateResourceValuesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &Content{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeForEvents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeForEvents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeForEvents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicesEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SubscribeForEvents_DevicesEventFilter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FilterBy = &SubscribeForEvents_DevicesEvent{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SubscribeForEvents_DeviceEventFilter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FilterBy = &SubscribeForEvents_DeviceEvent{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SubscribeForEvents_ResourceEventFilter{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FilterBy = &SubscribeForEvents_ResourceEvent{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CancelSubscription", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SubscribeForEvents_CancelSubscription{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.FilterBy = &SubscribeForEvents_CancelSubscription_{v}
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeForEvents_DevicesEventFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevicesEventFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevicesEventFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v SubscribeForEvents_DevicesEventFilter_Event
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDevices
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= SubscribeForEvents_DevicesEventFilter_Event(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FilterEvents = append(m.FilterEvents, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDevices
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDevices
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDevices
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.FilterEvents) == 0 {
					m.FilterEvents = make([]SubscribeForEvents_DevicesEventFilter_Event, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v SubscribeForEvents_DevicesEventFilter_Event
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDevices
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= SubscribeForEvents_DevicesEventFilter_Event(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FilterEvents = append(m.FilterEvents, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterEvents", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeForEvents_DeviceEventFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceEventFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceEventFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v SubscribeForEvents_DeviceEventFilter_Event
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDevices
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= SubscribeForEvents_DeviceEventFilter_Event(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FilterEvents = append(m.FilterEvents, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDevices
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDevices
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDevices
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.FilterEvents) == 0 {
					m.FilterEvents = make([]SubscribeForEvents_DeviceEventFilter_Event, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v SubscribeForEvents_DeviceEventFilter_Event
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDevices
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= SubscribeForEvents_DeviceEventFilter_Event(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FilterEvents = append(m.FilterEvents, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterEvents", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeForEvents_ResourceEventFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceEventFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceEventFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceId == nil {
				m.ResourceId = &ResourceId{}
			}
			if err := m.ResourceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v SubscribeForEvents_ResourceEventFilter_Event
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDevices
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= SubscribeForEvents_ResourceEventFilter_Event(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FilterEvents = append(m.FilterEvents, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDevices
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDevices
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDevices
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.FilterEvents) == 0 {
					m.FilterEvents = make([]SubscribeForEvents_ResourceEventFilter_Event, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v SubscribeForEvents_ResourceEventFilter_Event
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDevices
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= SubscribeForEvents_ResourceEventFilter_Event(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FilterEvents = append(m.FilterEvents, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterEvents", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeForEvents_CancelSubscription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelSubscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelSubscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceRegistered", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_DeviceRegistered{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Event_DeviceRegistered_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceUnregistered", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_DeviceUnregistered{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Event_DeviceUnregistered_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceOnline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_DeviceOnline{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Event_DeviceOnline_{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceOffline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_DeviceOffline{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Event_DeviceOffline_{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourcePublished", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_ResourcePublished{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Event_ResourcePublished_{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceUnpublished", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_ResourceUnpublished{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Event_ResourceUnpublished_{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceChanged", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_ResourceChanged{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Event_ResourceChanged_{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationProcessed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_OperationProcessed{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Event_OperationProcessed_{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionCanceled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_SubscriptionCanceled{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Event_SubscriptionCanceled_{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceUpdatePending", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_ResourceUpdatePending{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Event_ResourceUpdatePending_{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceUpdated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_ResourceUpdated{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Event_ResourceUpdated_{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceRetrievePending", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_ResourceRetrievePending{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Event_ResourceRetrievePending_{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceRetrieved", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_ResourceRetrieved{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &Event_ResourceRetrieved_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_DeviceRegistered) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceRegistered: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceRegistered: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceIds = append(m.DeviceIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_DeviceUnregistered) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceUnregistered: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceUnregistered: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceIds = append(m.DeviceIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_DeviceOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceIds = append(m.DeviceIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_DeviceOffline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceOffline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceOffline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceIds = append(m.DeviceIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_ResourcePublished) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourcePublished: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourcePublished: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Links", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Links = append(m.Links, &ResourceLink{})
			if err := m.Links[len(m.Links)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_ResourceUnpublished) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceUnpublished: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceUnpublished: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Links", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Links = append(m.Links, &ResourceLink{})
			if err := m.Links[len(m.Links)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_ResourceChanged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceChanged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceChanged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceId == nil {
				m.ResourceId = &ResourceId{}
			}
			if err := m.ResourceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &Content{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_ResourceUpdatePending) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceUpdatePending: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceUpdatePending: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceId == nil {
				m.ResourceId = &ResourceId{}
			}
			if err := m.ResourceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &Content{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceInterface = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_ResourceUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceId == nil {
				m.ResourceId = &ResourceId{}
			}
			if err := m.ResourceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &Content{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_ResourceRetrievePending) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceRetrievePending: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceRetrievePending: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceId == nil {
				m.ResourceId = &ResourceId{}
			}
			if err := m.ResourceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceInterface", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceInterface = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_ResourceRetrieved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceRetrieved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceRetrieved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceId == nil {
				m.ResourceId = &ResourceId{}
			}
			if err := m.ResourceId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &Content{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrelationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorrelationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_OperationProcessed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationProcessed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationProcessed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ErrorStatus == nil {
				m.ErrorStatus = &Event_OperationProcessed_ErrorStatus{}
			}
			if err := m.ErrorStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_OperationProcessed_ErrorStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= Event_OperationProcessed_ErrorStatus_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_SubscriptionCanceled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriptionCanceled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriptionCanceled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalizedString) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalizedString: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalizedString: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Device) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Device: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Device: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Types = append(m.Types, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOnline = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManufacturerName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManufacturerName = append(m.ManufacturerName, &LocalizedString{})
			if err := m.ManufacturerName[len(m.ManufacturerName)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModelNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interfaces = append(m.Interfaces, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolIndependentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtocolIndependentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Policies) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Policies: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Policies: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitFlags", wireType)
			}
			m.BitFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BitFlags |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndpointInformation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndpointInformation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndpointInformation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Href", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Href = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Types = append(m.Types, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interfaces", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interfaces = append(m.Interfaces, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceId", wireType)
			}
			m.InstanceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InstanceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Anchor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Anchor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policies == nil {
				m.Policies = &Policies{}
			}
			if err := m.Policies.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedContentTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportedContentTypes = append(m.SupportedContentTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndpointInformations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndpointInformations = append(m.EndpointInformations, &EndpointInformation{})
			if err := m.EndpointInformations[len(m.EndpointInformations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Content) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Content: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Content: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevices
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDevices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDevices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDevices(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDevices
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDevices
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDevices
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDevices
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDevices        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDevices          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDevices = fmt.Errorf("proto: unexpected end of group")
)
