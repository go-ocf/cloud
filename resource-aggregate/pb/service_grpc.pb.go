// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResourceAggregateClient is the client API for ResourceAggregate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceAggregateClient interface {
	PublishResourceLinks(ctx context.Context, in *PublishResourceLinksRequest, opts ...grpc.CallOption) (*PublishResourceLinksResponse, error)
	UnpublishResourceLinks(ctx context.Context, in *UnpublishResourceLinksRequest, opts ...grpc.CallOption) (*UnpublishResourceLinksResponse, error)
	NotifyResourceChanged(ctx context.Context, in *NotifyResourceChangedRequest, opts ...grpc.CallOption) (*NotifyResourceChangedResponse, error)
	UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
	ConfirmResourceUpdate(ctx context.Context, in *ConfirmResourceUpdateRequest, opts ...grpc.CallOption) (*ConfirmResourceUpdateResponse, error)
	RetrieveResource(ctx context.Context, in *RetrieveResourceRequest, opts ...grpc.CallOption) (*RetrieveResourceResponse, error)
	ConfirmResourceRetrieve(ctx context.Context, in *ConfirmResourceRetrieveRequest, opts ...grpc.CallOption) (*ConfirmResourceRetrieveResponse, error)
	DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error)
	ConfirmResourceDelete(ctx context.Context, in *ConfirmResourceDeleteRequest, opts ...grpc.CallOption) (*ConfirmResourceDeleteResponse, error)
}

type resourceAggregateClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceAggregateClient(cc grpc.ClientConnInterface) ResourceAggregateClient {
	return &resourceAggregateClient{cc}
}

func (c *resourceAggregateClient) PublishResourceLinks(ctx context.Context, in *PublishResourceLinksRequest, opts ...grpc.CallOption) (*PublishResourceLinksResponse, error) {
	out := new(PublishResourceLinksResponse)
	err := c.cc.Invoke(ctx, "/ocf.cloud.resourceaggregate.pb.ResourceAggregate/PublishResourceLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceAggregateClient) UnpublishResourceLinks(ctx context.Context, in *UnpublishResourceLinksRequest, opts ...grpc.CallOption) (*UnpublishResourceLinksResponse, error) {
	out := new(UnpublishResourceLinksResponse)
	err := c.cc.Invoke(ctx, "/ocf.cloud.resourceaggregate.pb.ResourceAggregate/UnpublishResourceLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceAggregateClient) NotifyResourceChanged(ctx context.Context, in *NotifyResourceChangedRequest, opts ...grpc.CallOption) (*NotifyResourceChangedResponse, error) {
	out := new(NotifyResourceChangedResponse)
	err := c.cc.Invoke(ctx, "/ocf.cloud.resourceaggregate.pb.ResourceAggregate/NotifyResourceChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceAggregateClient) UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	out := new(UpdateResourceResponse)
	err := c.cc.Invoke(ctx, "/ocf.cloud.resourceaggregate.pb.ResourceAggregate/UpdateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceAggregateClient) ConfirmResourceUpdate(ctx context.Context, in *ConfirmResourceUpdateRequest, opts ...grpc.CallOption) (*ConfirmResourceUpdateResponse, error) {
	out := new(ConfirmResourceUpdateResponse)
	err := c.cc.Invoke(ctx, "/ocf.cloud.resourceaggregate.pb.ResourceAggregate/ConfirmResourceUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceAggregateClient) RetrieveResource(ctx context.Context, in *RetrieveResourceRequest, opts ...grpc.CallOption) (*RetrieveResourceResponse, error) {
	out := new(RetrieveResourceResponse)
	err := c.cc.Invoke(ctx, "/ocf.cloud.resourceaggregate.pb.ResourceAggregate/RetrieveResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceAggregateClient) ConfirmResourceRetrieve(ctx context.Context, in *ConfirmResourceRetrieveRequest, opts ...grpc.CallOption) (*ConfirmResourceRetrieveResponse, error) {
	out := new(ConfirmResourceRetrieveResponse)
	err := c.cc.Invoke(ctx, "/ocf.cloud.resourceaggregate.pb.ResourceAggregate/ConfirmResourceRetrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceAggregateClient) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error) {
	out := new(DeleteResourceResponse)
	err := c.cc.Invoke(ctx, "/ocf.cloud.resourceaggregate.pb.ResourceAggregate/DeleteResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceAggregateClient) ConfirmResourceDelete(ctx context.Context, in *ConfirmResourceDeleteRequest, opts ...grpc.CallOption) (*ConfirmResourceDeleteResponse, error) {
	out := new(ConfirmResourceDeleteResponse)
	err := c.cc.Invoke(ctx, "/ocf.cloud.resourceaggregate.pb.ResourceAggregate/ConfirmResourceDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceAggregateServer is the server API for ResourceAggregate service.
// All implementations must embed UnimplementedResourceAggregateServer
// for forward compatibility
type ResourceAggregateServer interface {
	PublishResourceLinks(context.Context, *PublishResourceLinksRequest) (*PublishResourceLinksResponse, error)
	UnpublishResourceLinks(context.Context, *UnpublishResourceLinksRequest) (*UnpublishResourceLinksResponse, error)
	NotifyResourceChanged(context.Context, *NotifyResourceChangedRequest) (*NotifyResourceChangedResponse, error)
	UpdateResource(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
	ConfirmResourceUpdate(context.Context, *ConfirmResourceUpdateRequest) (*ConfirmResourceUpdateResponse, error)
	RetrieveResource(context.Context, *RetrieveResourceRequest) (*RetrieveResourceResponse, error)
	ConfirmResourceRetrieve(context.Context, *ConfirmResourceRetrieveRequest) (*ConfirmResourceRetrieveResponse, error)
	DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error)
	ConfirmResourceDelete(context.Context, *ConfirmResourceDeleteRequest) (*ConfirmResourceDeleteResponse, error)
	mustEmbedUnimplementedResourceAggregateServer()
}

// UnimplementedResourceAggregateServer must be embedded to have forward compatible implementations.
type UnimplementedResourceAggregateServer struct {
}

func (UnimplementedResourceAggregateServer) PublishResourceLinks(context.Context, *PublishResourceLinksRequest) (*PublishResourceLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishResourceLinks not implemented")
}
func (UnimplementedResourceAggregateServer) UnpublishResourceLinks(context.Context, *UnpublishResourceLinksRequest) (*UnpublishResourceLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpublishResourceLinks not implemented")
}
func (UnimplementedResourceAggregateServer) NotifyResourceChanged(context.Context, *NotifyResourceChangedRequest) (*NotifyResourceChangedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyResourceChanged not implemented")
}
func (UnimplementedResourceAggregateServer) UpdateResource(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResource not implemented")
}
func (UnimplementedResourceAggregateServer) ConfirmResourceUpdate(context.Context, *ConfirmResourceUpdateRequest) (*ConfirmResourceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmResourceUpdate not implemented")
}
func (UnimplementedResourceAggregateServer) RetrieveResource(context.Context, *RetrieveResourceRequest) (*RetrieveResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveResource not implemented")
}
func (UnimplementedResourceAggregateServer) ConfirmResourceRetrieve(context.Context, *ConfirmResourceRetrieveRequest) (*ConfirmResourceRetrieveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmResourceRetrieve not implemented")
}
func (UnimplementedResourceAggregateServer) DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedResourceAggregateServer) ConfirmResourceDelete(context.Context, *ConfirmResourceDeleteRequest) (*ConfirmResourceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmResourceDelete not implemented")
}
func (UnimplementedResourceAggregateServer) mustEmbedUnimplementedResourceAggregateServer() {}

// UnsafeResourceAggregateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceAggregateServer will
// result in compilation errors.
type UnsafeResourceAggregateServer interface {
	mustEmbedUnimplementedResourceAggregateServer()
}

func RegisterResourceAggregateServer(s grpc.ServiceRegistrar, srv ResourceAggregateServer) {
	s.RegisterService(&ResourceAggregate_ServiceDesc, srv)
}

func _ResourceAggregate_PublishResourceLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishResourceLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAggregateServer).PublishResourceLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocf.cloud.resourceaggregate.pb.ResourceAggregate/PublishResourceLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAggregateServer).PublishResourceLinks(ctx, req.(*PublishResourceLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceAggregate_UnpublishResourceLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpublishResourceLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAggregateServer).UnpublishResourceLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocf.cloud.resourceaggregate.pb.ResourceAggregate/UnpublishResourceLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAggregateServer).UnpublishResourceLinks(ctx, req.(*UnpublishResourceLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceAggregate_NotifyResourceChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyResourceChangedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAggregateServer).NotifyResourceChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocf.cloud.resourceaggregate.pb.ResourceAggregate/NotifyResourceChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAggregateServer).NotifyResourceChanged(ctx, req.(*NotifyResourceChangedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceAggregate_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAggregateServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocf.cloud.resourceaggregate.pb.ResourceAggregate/UpdateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAggregateServer).UpdateResource(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceAggregate_ConfirmResourceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmResourceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAggregateServer).ConfirmResourceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocf.cloud.resourceaggregate.pb.ResourceAggregate/ConfirmResourceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAggregateServer).ConfirmResourceUpdate(ctx, req.(*ConfirmResourceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceAggregate_RetrieveResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAggregateServer).RetrieveResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocf.cloud.resourceaggregate.pb.ResourceAggregate/RetrieveResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAggregateServer).RetrieveResource(ctx, req.(*RetrieveResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceAggregate_ConfirmResourceRetrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmResourceRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAggregateServer).ConfirmResourceRetrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocf.cloud.resourceaggregate.pb.ResourceAggregate/ConfirmResourceRetrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAggregateServer).ConfirmResourceRetrieve(ctx, req.(*ConfirmResourceRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceAggregate_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAggregateServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocf.cloud.resourceaggregate.pb.ResourceAggregate/DeleteResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAggregateServer).DeleteResource(ctx, req.(*DeleteResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceAggregate_ConfirmResourceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmResourceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceAggregateServer).ConfirmResourceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocf.cloud.resourceaggregate.pb.ResourceAggregate/ConfirmResourceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceAggregateServer).ConfirmResourceDelete(ctx, req.(*ConfirmResourceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceAggregate_ServiceDesc is the grpc.ServiceDesc for ResourceAggregate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceAggregate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocf.cloud.resourceaggregate.pb.ResourceAggregate",
	HandlerType: (*ResourceAggregateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishResourceLinks",
			Handler:    _ResourceAggregate_PublishResourceLinks_Handler,
		},
		{
			MethodName: "UnpublishResourceLinks",
			Handler:    _ResourceAggregate_UnpublishResourceLinks_Handler,
		},
		{
			MethodName: "NotifyResourceChanged",
			Handler:    _ResourceAggregate_NotifyResourceChanged_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _ResourceAggregate_UpdateResource_Handler,
		},
		{
			MethodName: "ConfirmResourceUpdate",
			Handler:    _ResourceAggregate_ConfirmResourceUpdate_Handler,
		},
		{
			MethodName: "RetrieveResource",
			Handler:    _ResourceAggregate_RetrieveResource_Handler,
		},
		{
			MethodName: "ConfirmResourceRetrieve",
			Handler:    _ResourceAggregate_ConfirmResourceRetrieve_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _ResourceAggregate_DeleteResource_Handler,
		},
		{
			MethodName: "ConfirmResourceDelete",
			Handler:    _ResourceAggregate_ConfirmResourceDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/plgd-dev/cloud/resource-aggregate/pb/service.proto",
}
